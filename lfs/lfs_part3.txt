Part III. Building the LFS System

Chapter 6. Installing Basic System Software

6.1. Introduction

In this chapter, we enter the building site and start constructing the LFS system in earnest. That is, we chroot into the temporary mini Linux system, make a few final preparations, and then begin installing the packages.

The installation of this software is straightforward. Although in many cases the installation instructions could be made shorter and more generic, we have opted to provide the full instructions for every package to minimize the possibilities for mistakes. The key to learning what makes a Linux system work is to know what each package is used for and why you (or the system) may need it.

We do not recommend using optimizations. They can make a program run slightly faster, but they may also cause compilation difficulties and problems when running the program. If a package refuses to compile when using optimization, try to compile it without optimization and see if that fixes the problem. Even if the package does compile when using optimization, there is the risk it may have been compiled incorrectly because of the complex interactions between the code and build tools. Also note that the -march and -mtune options using values not specified in the book have not been tested. This may cause problems with the toolchain packages (Binutils, GCC and Glibc). The small potential gains achieved in using compiler optimizations are often outweighed by the risks. First-time builders of LFS are encouraged to build without custom optimizations. The subsequent system will still run very fast and be stable at the same time.

The order that packages are installed in this chapter needs to be strictly followed to ensure that no program accidentally acquires a path referring to /tools hard-wired into it. For the same reason, do not compile separate packages in parallel. Compiling in parallel may save time (especially on dual-CPU machines), but it could result in a program containing a hard-wired path to /tools, which will cause the program to stop working when that directory is removed.

Before the installation instructions, each installation page provides information about the package, including a concise description of what it contains, approximately how long it will take to build, and how much disk space is required during this building process. Following the installation instructions, there is a list of programs and libraries (along with brief descriptions of these) that the package installs.

Note

The SBU values and required disk space includes test suite data for all applicable packages in Chapter 6.

6.2. Preparing Virtual Kernel File Systems

Various file systems exported by the kernel are used to communicate to and from the kernel itself. These file systems are virtual in that no disk space is used for them. The content of the file systems resides in memory.

Begin by creating directories onto which the file systems will be mounted:

mkdir -pv $LFS/{dev,proc,sys,run}
6.2.1. Creating Initial Device Nodes

When the kernel boots the system, it requires the presence of a few device nodes, in particular the console and null devices. The device nodes must be created on the hard disk so that they are available before udevd has been started, and additionally when Linux is started with init=/bin/bash. Create the devices by running the following commands:

mknod -m 600 $LFS/dev/console c 5 1
mknod -m 666 $LFS/dev/null c 1 3
6.2.2. Mounting and Populating /dev

The recommended method of populating the /dev directory with devices is to mount a virtual filesystem (such as tmpfs) on the /dev directory, and allow the devices to be created dynamically on that virtual filesystem as they are detected or accessed. Device creation is generally done during the boot process by Udev. Since this new system does not yet have Udev and has not yet been booted, it is necessary to mount and populate /dev manually. This is accomplished by bind mounting the host system's /dev directory. A bind mount is a special type of mount that allows you to create a mirror of a directory or mount point to some other location. Use the following command to achieve this:

mount -v --bind /dev $LFS/dev
6.2.3. Mounting Virtual Kernel File Systems

Now mount the remaining virtual kernel filesystems:

mount -vt devpts devpts $LFS/dev/pts -o gid=5,mode=620
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys
mount -vt tmpfs tmpfs $LFS/run
The meaning of the mount options for devpts:

gid=5
This ensures that all devpts-created device nodes are owned by group ID 5. This is the ID we will use later on for the tty group. We use the group ID instead of a name, since the host system might use a different ID for its tty group.
mode=0620
This ensures that all devpts-created device nodes have mode 0620 (user readable and writable, group writable). Together with the option above, this ensures that devpts will create device nodes that meet the requirements of grantpt(), meaning the Glibc pt_chown helper binary (which is not installed by default) is not necessary.
In some host systems, /dev/shm is a symbolic link to /run/shm. The /run tmpfs was mounted above so in this case only a directory needs to be created.

if [ -h $LFS/dev/shm ]; then
  mkdir -pv $LFS/$(readlink $LFS/dev/shm)
fi
6.3. Package Management

Package Management is an often requested addition to the LFS Book. A Package Manager allows tracking the installation of files making it easy to remove and upgrade packages. As well as the binary and library files, a package manager will handle the installation of configuration files. Before you begin to wonder, NO—this section will not talk about nor recommend any particular package manager. What it provides is a roundup of the more popular techniques and how they work. The perfect package manager for you may be among these techniques or may be a combination of two or more of these techniques. This section briefly mentions issues that may arise when upgrading packages.

Some reasons why no package manager is mentioned in LFS or BLFS include:

Dealing with package management takes the focus away from the goals of these books—teaching how a Linux system is built.

There are multiple solutions for package management, each having its strengths and drawbacks. Including one that satisfies all audiences is difficult.

There are some hints written on the topic of package management. Visit the Hints Project and see if one of them fits your need.

6.3.1. Upgrade Issues

A Package Manager makes it easy to upgrade to newer versions when they are released. Generally the instructions in the LFS and BLFS Book can be used to upgrade to the newer versions. Here are some points that you should be aware of when upgrading packages, especially on a running system.

If one of the toolchain packages (Glibc, GCC or Binutils) needs to be upgraded to a newer minor version, it is safer to rebuild LFS. Though you may be able to get by rebuilding all the packages in their dependency order, we do not recommend it. For example, if glibc-2.2.x needs to be updated to glibc-2.3.x, it is safer to rebuild. For micro version updates, a simple reinstallation usually works, but is not guaranteed. For example, upgrading from glibc-2.3.4 to glibc-2.3.5 will not usually cause any problems.

If a package containing a shared library is updated, and if the name of the library changes, then all the packages dynamically linked to the library need to be recompiled to link against the newer library. (Note that there is no correlation between the package version and the name of the library.) For example, consider a package foo-1.2.3 that installs a shared library with name libfoo.so.1. Say you upgrade the package to a newer version foo-1.2.4 that installs a shared library with name libfoo.so.2. In this case, all packages that are dynamically linked to libfoo.so.1 need to be recompiled to link against libfoo.so.2. Note that you should not remove the previous libraries until the dependent packages are recompiled.

6.3.2. Package Management Techniques

The following are some common package management techniques. Before making a decision on a package manager, do some research on the various techniques, particularly the drawbacks of the particular scheme.

6.3.2.1. It is All in My Head!

Yes, this is a package management technique. Some folks do not find the need for a package manager because they know the packages intimately and know what files are installed by each package. Some users also do not need any package management because they plan on rebuilding the entire system when a package is changed.

6.3.2.2. Install in Separate Directories

This is a simplistic package management that does not need any extra package to manage the installations. Each package is installed in a separate directory. For example, package foo-1.1 is installed in /usr/pkg/foo-1.1 and a symlink is made from /usr/pkg/foo to /usr/pkg/foo-1.1. When installing a new version foo-1.2, it is installed in /usr/pkg/foo-1.2 and the previous symlink is replaced by a symlink to the new version.

Environment variables such as PATH, LD_LIBRARY_PATH, MANPATH, INFOPATH and CPPFLAGS need to be expanded to include /usr/pkg/foo. For more than a few packages, this scheme becomes unmanageable.

6.3.2.3. Symlink Style Package Management

This is a variation of the previous package management technique. Each package is installed similar to the previous scheme. But instead of making the symlink, each file is symlinked into the /usr hierarchy. This removes the need to expand the environment variables. Though the symlinks can be created by the user to automate the creation, many package managers have been written using this approach. A few of the popular ones include Stow, Epkg, Graft, and Depot.

The installation needs to be faked, so that the package thinks that it is installed in /usr though in reality it is installed in the /usr/pkg hierarchy. Installing in this manner is not usually a trivial task. For example, consider that you are installing a package libfoo-1.1. The following instructions may not install the package properly:

./configure --prefix=/usr/pkg/libfoo/1.1
make
make install
The installation will work, but the dependent packages may not link to libfoo as you would expect. If you compile a package that links against libfoo, you may notice that it is linked to /usr/pkg/libfoo/1.1/lib/libfoo.so.1 instead of /usr/lib/libfoo.so.1 as you would expect. The correct approach is to use the DESTDIR strategy to fake installation of the package. This approach works as follows:

./configure --prefix=/usr
make
make DESTDIR=/usr/pkg/libfoo/1.1 install
Most packages support this approach, but there are some which do not. For the non-compliant packages, you may either need to manually install the package, or you may find that it is easier to install some problematic packages into /opt.

6.3.2.4. Timestamp Based

In this technique, a file is timestamped before the installation of the package. After the installation, a simple use of the find command with the appropriate options can generate a log of all the files installed after the timestamp file was created. A package manager written with this approach is install-log.

Though this scheme has the advantage of being simple, it has two drawbacks. If, during installation, the files are installed with any timestamp other than the current time, those files will not be tracked by the package manager. Also, this scheme can only be used when one package is installed at a time. The logs are not reliable if two packages are being installed on two different consoles.

6.3.2.5. Tracing Installation Scripts

In this approach, the commands that the installation scripts perform are recorded. There are two techniques that one can use:

The LD_PRELOAD environment variable can be set to point to a library to be preloaded before installation. During installation, this library tracks the packages that are being installed by attaching itself to various executables such as cp, install, mv and tracking the system calls that modify the filesystem. For this approach to work, all the executables need to be dynamically linked without the suid or sgid bit. Preloading the library may cause some unwanted side-effects during installation. Therefore, it is advised that one performs some tests to ensure that the package manager does not break anything and logs all the appropriate files.

The second technique is to use strace, which logs all system calls made during the execution of the installation scripts.

6.3.2.6. Creating Package Archives

In this scheme, the package installation is faked into a separate tree as described in the Symlink style package management. After the installation, a package archive is created using the installed files. This archive is then used to install the package either on the local machine or can even be used to install the package on other machines.

This approach is used by most of the package managers found in the commercial distributions. Examples of package managers that follow this approach are RPM (which, incidentally, is required by the Linux Standard Base Specification), pkg-utils, Debian's apt, and Gentoo's Portage system. A hint describing how to adopt this style of package management for LFS systems is located at http://www.linuxfromscratch.org/hints/downloads/files/fakeroot.txt.

Creation of package files that include dependency information is complex and is beyond the scope of LFS.

Slackware uses a tar based system for package archives. This system purposely does not handle package dependencies as more complex package managers do. For details of Slackware package management, see http://www.slackbook.org/html/package-management.html.

6.3.2.7. User Based Management

This scheme, unique to LFS, was devised by Matthias Benkmann, and is available from the Hints Project. In this scheme, each package is installed as a separate user into the standard locations. Files belonging to a package are easily identified by checking the user ID. The features and shortcomings of this approach are too complex to describe in this section. For the details please see the hint at http://www.linuxfromscratch.org/hints/downloads/files/more_control_and_pkg_man.txt.

6.3.3. Deploying LFS on Multiple Systems

One of the advantages of an LFS system is that there are no files that depend on the position of files on a disk system. Cloning an LFS build to another computer with an architecture similar to the base system is as simple as using tar on the LFS partition that contains the root directory (about 250MB uncompressed for a base LFS build), copying that file via network transfer or CD-ROM to the new system and expanding it. From that point, a few configuration files will have to be changed. Configuration files that may need to be updated include: /etc/hosts, /etc/fstab, /etc/passwd, /etc/group, /etc/shadow, /etc/ld.so.conf, /etc/sysconfig/rc.site, /etc/sysconfig/network, and /etc/sysconfig/ifconfig.eth0.

A custom kernel may need to be built for the new system depending on differences in system hardware and the original kernel configuration.

Finally the new system has to be made bootable via Section 8.4, “Using GRUB to Set Up the Boot Process”.

6.4. Entering the Chroot Environment

It is time to enter the chroot environment to begin building and installing the final LFS system. As user root, run the following command to enter the realm that is, at the moment, populated with only the temporary tools:

chroot "$LFS" /tools/bin/env -i \
    HOME=/root                  \
    TERM="$TERM"                \
    PS1='\u:\w\$ '              \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
    /tools/bin/bash --login +h
The -i option given to the env command will clear all variables of the chroot environment. After that, only the HOME, TERM, PS1, and PATH variables are set again. The TERM=$TERM construct will set the TERM variable inside chroot to the same value as outside chroot. This variable is needed for programs like vim and less to operate properly. If other variables are needed, such as CFLAGS or CXXFLAGS, this is a good place to set them again.

From this point on, there is no need to use the LFS variable anymore, because all work will be restricted to the LFS file system. This is because the Bash shell is told that $LFS is now the root (/) directory.

Notice that /tools/bin comes last in the PATH. This means that a temporary tool will no longer be used once its final version is installed. This occurs when the shell does not “remember” the locations of executed binaries—for this reason, hashing is switched off by passing the +h option to bash.

Note that the bash prompt will say I have no name! This is normal because the /etc/passwd file has not been created yet.

Note

It is important that all the commands throughout the remainder of this chapter and the following chapters are run from within the chroot environment. If you leave this environment for any reason (rebooting for example), ensure that the virtual kernel filesystems are mounted as explained in Section 6.2.2, “Mounting and Populating /dev” and Section 6.2.3, “Mounting Virtual Kernel File Systems” and enter chroot again before continuing with the installation.

6.5. Creating Directories

It is time to create some structure in the LFS file system. Create a standard directory tree by issuing the following commands:

mkdir -pv /{bin,boot,etc/{opt,sysconfig},home,lib,mnt,opt}
mkdir -pv /{media/{floppy,cdrom},sbin,srv,var}
install -dv -m 0750 /root
install -dv -m 1777 /tmp /var/tmp
mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src}
mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
mkdir -v  /usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -v  /usr/libexec
mkdir -pv /usr/{,local/}share/man/man{1..8}

case $(uname -m) in
 x86_64) ln -sv lib /lib64     && 
         ln -sv lib /usr/lib64 && 
         ln -sv lib /usr/local/lib64 ;;
esac

mkdir -v /var/{log,mail,spool}
ln -sv /run /var/run
ln -sv /run/lock /var/lock
mkdir -pv /var/{opt,cache,lib/{color,misc,locate},local}
Directories are, by default, created with permission mode 755, but this is not desirable for all directories. In the commands above, two changes are made—one to the home directory of user root, and another to the directories for temporary files.

The first mode change ensures that not just anybody can enter the /root directory—the same as a normal user would do with his or her home directory. The second mode change makes sure that any user can write to the /tmp and /var/tmp directories, but cannot remove another user's files from them. The latter is prohibited by the so-called “sticky bit,” the highest bit (1) in the 1777 bit mask.

6.5.1. FHS Compliance Note

The directory tree is based on the Filesystem Hierarchy Standard (FHS) (available at http://www.pathname.com/fhs/). In addition to the FHS, we create compatibility symlinks for the man, doc, and info directories since many packages still try to install their documentation into /usr/<directory> or /usr/local/<directory> as opposed to /usr/share/<directory> or /usr/local/share/<directory>. The FHS also stipulates the existence of /usr/local/games and /usr/share/games. The FHS is not precise as to the structure of the /usr/local/share subdirectory, so we create only the directories that are needed. However, feel free to create these directories if you prefer to conform more strictly to the FHS.

6.6. Creating Essential Files and Symlinks

Some programs use hard-wired paths to programs which do not exist yet. In order to satisfy these programs, create a number of symbolic links which will be replaced by real files throughout the course of this chapter after the software has been installed:

ln -sv /tools/bin/{bash,cat,echo,pwd,stty} /bin
ln -sv /tools/bin/perl /usr/bin
ln -sv /tools/lib/libgcc_s.so{,.1} /usr/lib
ln -sv /tools/lib/libstdc++.so{,.6} /usr/lib
sed 's/tools/usr/' /tools/lib/libstdc++.la > /usr/lib/libstdc++.la
ln -sv bash /bin/sh
Historically, Linux maintains a list of the mounted file systems in the file /etc/mtab. Modern kernels maintain this list internally and exposes it to the user via the /proc filesystem. To satisfy utilities that expect the presence of /etc/mtab, create the following symbolic link:

ln -sv /proc/self/mounts /etc/mtab
In order for user root to be able to login and for the name “root” to be recognized, there must be relevant entries in the /etc/passwd and /etc/group files.

Create the /etc/passwd file by running the following command:

cat > /etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF
The actual password for root (the “x” used here is just a placeholder) will be set later.

Create the /etc/group file by running the following command:

cat > /etc/group << "EOF"
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
mail:x:34:
nogroup:x:99:
EOF
The created groups are not part of any standard—they are groups decided on in part by the requirements of the Udev configuration in this chapter, and in part by common convention employed by a number of existing Linux distributions. The Linux Standard Base (LSB, available at http://www.linuxbase.org) recommends only that, besides the group root with a Group ID (GID) of 0, a group bin with a GID of 1 be present. All other group names and GIDs can be chosen freely by the system administrator since well-written programs do not depend on GID numbers, but rather use the group's name.

To remove the “I have no name!” prompt, start a new shell. Since a full Glibc was installed in Chapter 5 and the /etc/passwd and /etc/group files have been created, user name and group name resolution will now work:

exec /tools/bin/bash --login +h
Note the use of the +h directive. This tells bash not to use its internal path hashing. Without this directive, bash would remember the paths to binaries it has executed. To ensure the use of the newly compiled binaries as soon as they are installed, the +h directive will be used for the duration of this chapter.

The login, agetty, and init programs (and others) use a number of log files to record information such as who was logged into the system and when. However, these programs will not write to the log files if they do not already exist. Initialize the log files and give them proper permissions:

touch /var/log/{btmp,lastlog,wtmp}
chgrp -v utmp /var/log/lastlog
chmod -v 664  /var/log/lastlog
chmod -v 600  /var/log/btmp
The /var/log/wtmp file records all logins and logouts. The /var/log/lastlog file records when each user last logged in. The /var/log/btmp file records the bad login attempts.

Note

The /run/utmp file records the users that are currently logged in. This file is created dynamically in the boot scripts.

6.7. Linux-3.13.3 API Headers
The Linux API Headers (in linux-3.13.3.tar.xz) expose the kernel's API for use by Glibc.

Approximate build time:
0.1 SBU
Required disk space:
588 MB
6.7.1. Installation of Linux API Headers

The Linux kernel needs to expose an Application Programming Interface (API) for the system's C library (Glibc in LFS) to use. This is done by way of sanitizing various C header files that are shipped in the Linux kernel source tarball.

Make sure there are no stale files and dependencies lying around from previous activity:

make mrproper
Now test and extract the user-visible kernel headers from the source. They are placed in an intermediate local directory and copied to the needed location because the extraction process removes any existing files in the target directory. There are also some hidden files used by the kernel developers and not needed by LFS that are removed from the intermediate directory.

make headers_check
make INSTALL_HDR_PATH=dest headers_install
find dest/include \( -name .install -o -name ..install.cmd \) -delete
cp -rv dest/include/* /usr/include
6.7.2. Contents of Linux API Headers

Installed headers:
/usr/include/asm/*.h, /usr/include/asm-generic/*.h, /usr/include/drm/*.h, /usr/include/linux/*.h, /usr/include/mtd/*.h, /usr/include/rdma/*.h, /usr/include/scsi/*.h, /usr/include/sound/*.h, /usr/include/video/*.h, /usr/include/xen/*.h
Installed directories:
/usr/include/asm, /usr/include/asm-generic, /usr/include/drm, /usr/include/linux, /usr/include/mtd, /usr/include/rdma, /usr/include/scsi, /usr/include/sound, /usr/include/video, /usr/include/xen
Short Descriptions

/usr/include/asm/*.h
The Linux API ASM Headers
/usr/include/asm-generic/*.h
The Linux API ASM Generic Headers
/usr/include/drm/*.h
The Linux API DRM Headers
/usr/include/linux/*.h
The Linux API Linux Headers
/usr/include/mtd/*.h
The Linux API MTD Headers
/usr/include/rdma/*.h
The Linux API RDMA Headers
/usr/include/scsi/*.h
The Linux API SCSI Headers
/usr/include/sound/*.h
The Linux API Sound Headers
/usr/include/video/*.h
The Linux API Video Headers
/usr/include/xen/*.h
The Linux API Xen Headers
6.8. Man-pages-3.59
The Man-pages package contains over 1,900 man pages.

Approximate build time:
less than 0.1 SBU
Required disk space:
23 MB
6.8.1. Installation of Man-pages

Install Man-pages by running:

make install
6.8.2. Contents of Man-pages

Installed files:
various man pages
Short Descriptions

man pages
Describe C programming language functions, important device files, and significant configuration files
6.9. Glibc-2.19
The Glibc package contains the main C library. This library provides the basic routines for allocating memory, searching directories, opening and closing files, reading and writing files, string handling, pattern matching, arithmetic, and so on.

Approximate build time:
17.1 SBU
Required disk space:
922 MB
6.9.1. Installation of Glibc

Note

Some packages outside of LFS suggest installing GNU libiconv in order to translate data from one encoding to another. The project's home page (http://www.gnu.org/software/libiconv/) says “This library provides an iconv() implementation, for use on systems which don't have one, or whose implementation cannot convert from/to Unicode.” Glibc provides an iconv() implementation and can convert from/to Unicode, therefore libiconv is not required on an LFS system.

First fix a minor problem when installing the tzselect script:

sed -i 's/\\$$(pwd)/`pwd`/' timezone/Makefile
Some of the Glibc programs use non-FHS compilant /var/db directory to store their runtime data. Apply the following patch to make such programs store their runtime data in the FHS-compliant locations:

patch -Np1 -i ../glibc-2.19-fhs-1.patch
The Glibc build system is self-contained and will install perfectly, even though the compiler specs file and linker are still pointing at /tools. The specs and linker cannot be adjusted before the Glibc install because the Glibc autoconf tests would give false results and defeat the goal of achieving a clean build.

The Glibc documentation recommends building Glibc outside of the source directory in a dedicated build directory:

mkdir -v ../glibc-build
cd ../glibc-build
Prepare Glibc for compilation:

../glibc-2.19/configure    \
    --prefix=/usr          \
    --disable-profile      \
    --enable-kernel=2.6.32 \
    --enable-obsolete-rpc
The meaning of the new configure options:

--enable-obsolete-rpc
Installs NIS and RPC related headers that are not installed by default; these are required to rebuild Glibc and by several BLFS packages.
Compile the package:

make
Important

In this section, the test suite for Glibc is considered critical. Do not skip it under any circumstance.

Generally a few tests do not pass, but you can generally ignore any of the test failures listed below. Now test the build results:

make -k check 2>&1 | tee glibc-check-log
grep Error glibc-check-log
You will probably see an expected (ignored) failure in the posix/annexc and conform/run-conformtest tests. In addition the Glibc test suite is somewhat dependent on the host system. This is a list of the most common issues:

The nptl/tst-clock2, nptl/tst-attr3, tst/tst-cputimer1, and rt/tst-cpuclock2 tests have been known to fail. The reason is not completely understood, but indications are that minor timing issues can trigger these failures.

The math tests sometimes fail when running on systems where the CPU is not a relatively new genuine Intel or authentic AMD processor.

When running on older and slower hardware or on systems under load, some tests can fail because of test timeouts being exceeded. Modifying the make check command to set a TIMEOUTFACTOR is reported to help eliminate these errors (e.g. TIMEOUTFACTOR=16 make -k check).

posix/tst-getaddrinfo4 will always fail due to not having a network connection when the test is run.

libio/tst-ftell-partial-wide.out fails because it needs a locale that has not yet been generated.

Other tests known to fail on some architectures are posix/bug-regex32, misc/tst-writev, elf/check-textrel, nptl/tst-getpid2, nptl/tst-robust8, and stdio-common/bug22.

Though it is a harmless message, the install stage of Glibc will complain about the absence of /etc/ld.so.conf. Prevent this warning with:

touch /etc/ld.so.conf
Install the package:

make install
Install the configuration file and runtime directory for nscd:

cp -v ../glibc-2.19/nscd/nscd.conf /etc/nscd.conf
mkdir -pv /var/cache/nscd
The locales that can make the system respond in a different language were not installed by the above command. None of the locales are required, but if some of them are missing, test suites of the future packages would skip important testcases.

Individual locales can be installed using the localedef program. E.g., the first localedef command below combines the /usr/share/i18n/locales/cs_CZ charset-independent locale definition with the /usr/share/i18n/charmaps/UTF-8.gz charmap definition and appends the result to the /usr/lib/locale/locale-archive file. The following instructions will install the minimum set of locales necessary for the optimal coverage of tests:

mkdir -pv /usr/lib/locale
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i en_GB -f UTF-8 en_GB.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i it_IT -f UTF-8 it_IT.UTF-8
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
localedef -i zh_CN -f GB18030 zh_CN.GB18030
In addition, install the locale for your own country, language and character set.

Alternatively, install all locales listed in the glibc-2.19/localedata/SUPPORTED file (it includes every locale listed above and many more) at once with the following time-consuming command:

make localedata/install-locales
Then use the localedef command to create and install locales not listed in the glibc-2.19/localedata/SUPPORTED file in the unlikely case you need them.

6.9.2. Configuring Glibc

The /etc/nsswitch.conf file needs to be created because, although Glibc provides defaults when this file is missing or corrupt, the Glibc defaults do not work well in a networked environment. The time zone also needs to be configured.

Create a new file /etc/nsswitch.conf by running the following:

cat > /etc/nsswitch.conf << "EOF"
# Begin /etc/nsswitch.conf

passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files

# End /etc/nsswitch.conf
EOF
Install timezone data:

tar -xf ../tzdata2013i.tar.gz

ZONEINFO=/usr/share/zoneinfo
mkdir -pv $ZONEINFO/{posix,right}

for tz in etcetera southamerica northamerica europe africa antarctica  \
          asia australasia backward pacificnew systemv; do
    zic -L /dev/null   -d $ZONEINFO       -y "sh yearistype.sh" ${tz}
    zic -L /dev/null   -d $ZONEINFO/posix -y "sh yearistype.sh" ${tz}
    zic -L leapseconds -d $ZONEINFO/right -y "sh yearistype.sh" ${tz}
done

cp -v zone.tab iso3166.tab $ZONEINFO
zic -d $ZONEINFO -p America/New_York
unset ZONEINFO
The meaning of the zic commands:

zic -L /dev/null ...
This creates posix timezones, without any leap seconds. It is conventional to put these in both zoneinfo and zoneinfo/posix. It is necessary to put the POSIX timezones in zoneinfo, otherwise various test-suites will report errors. On an embedded system, where space is tight and you do not intend to ever update the timezones, you could save 1.9MB by not using the posix directory, but some applications or test-suites might give less good results
zic -L leapseconds ...
This creates right timezones, including leap seconds. On an embedded system, where space is tight and you do not intend to ever update the timezones, or care about the correct time, you could save 1.9MB by omitting the right directory.
zic ... -p ...
This creates the posixrules file. We use New York because POSIX requires the daylight savings time rules to be in accordance with US rules.
One way to determine the local time zone is to run the following script:

tzselect
After answering a few questions about the location, the script will output the name of the time zone (e.g., America/Edmonton). There are also some other possible timezones listed in /usr/share/zoneinfo such as Canada/Eastern or EST5EDT that are not identified by the script but can be used.

Then create the /etc/localtime file by running:

cp -v /usr/share/zoneinfo/<xxx> /etc/localtime
Replace <xxx> with the name of the time zone selected (e.g., Canada/Eastern).

6.9.3. Configuring the Dynamic Loader

By default, the dynamic loader (/lib/ld-linux.so.2) searches through /lib and /usr/lib for dynamic libraries that are needed by programs as they are run. However, if there are libraries in directories other than /lib and /usr/lib, these need to be added to the /etc/ld.so.conf file in order for the dynamic loader to find them. Two directories that are commonly known to contain additional libraries are /usr/local/lib and /opt/lib, so add those directories to the dynamic loader's search path.

Create a new file /etc/ld.so.conf by running the following:

cat > /etc/ld.so.conf << "EOF"
# Begin /etc/ld.so.conf
/usr/local/lib
/opt/lib

EOF
If desired, the dynamic loader can also search a directory and include the contents of files found there. Generally the files in this include directory are one line specifying the desired library path. To add this capability run the following commands:

cat >> /etc/ld.so.conf << "EOF"
# Add an include directory
include /etc/ld.so.conf.d/*.conf

EOF
mkdir -pv /etc/ld.so.conf.d
6.9.4. Contents of Glibc

Installed programs:
catchsegv, gencat, getconf, getent, iconv, iconvconfig, ldconfig, ldd, lddlibc4, locale, localedef, makedb, mtrace, nscd, pcprofiledump, pldd, rpcgen, sln, sotruss, sprof, tzselect, xtrace, zdump, and zic
Installed libraries:
ld.so, libBrokenLocale.{a,so}, libSegFault.so, libanl.{a,so}, libc.{a,so}, libc_nonshared.a, libcidn.so, libcrypt.{a,so}, libdl.{a,so}, libg.a, libieee.a, libm.{a,so}, libmcheck.a, libmemusage.so, libnsl.{a,so}, libnss_compat.so, libnss_dns.so, libnss_files.so, libnss_hesiod.so, libnss_nis.so, libnss_nisplus.so, libpcprofile.so, libpthread.{a,so}, libpthread_nonshared.a, libresolv.{a,so}, librpcsvc.a, librt.{a,so}, libthread_db.so, and libutil.{a,so}
Installed directories:
/usr/include/arpa, /usr/include/bits, /usr/include/gnu, /usr/include/net, /usr/include/netash, /usr/include/netatalk, /usr/include/netax25, /usr/include/neteconet, /usr/include/netinet, /usr/include/netipx, /usr/include/netiucv, /usr/include/netpacket, /usr/include/netrom, /usr/include/netrose, /usr/include/nfs, /usr/include/protocols, /usr/include/rpc, /usr/include/rpcsvc, /usr/include/sys, /usr/lib/audit, /usr/lib/gconv, /usr/lib/locale, /usr/libexec/getconf, /usr/share/i18n, /usr/share/zoneinfo, /var/cache/nscd, and /var/lib/nss_db
Short Descriptions

catchsegv
Can be used to create a stack trace when a program terminates with a segmentation fault
gencat
Generates message catalogues
getconf
Displays the system configuration values for file system specific variables
getent
Gets entries from an administrative database
iconv
Performs character set conversion
iconvconfig
Creates fastloading iconv module configuration files
ldconfig
Configures the dynamic linker runtime bindings
ldd
Reports which shared libraries are required by each given program or shared library
lddlibc4
Assists ldd with object files
locale
Prints various information about the current locale
localedef
Compiles locale specifications
makedb
Creates a simple database from textual input
mtrace
Reads and interprets a memory trace file and displays a summary in human-readable format
nscd
A daemon that provides a cache for the most common name service requests
pcprofiledump
Dumps information generated by PC profiling
pldd
Lists dynamic shared objects used by running processes
rpcgen
Generates C code to implement the Remote Procedure Call (RPC) protocol
sln
A statically linked ln program
sotruss
Traces shared library procedure calls of a specified command
sprof
Reads and displays shared object profiling data
tzselect
Asks the user about the location of the system and reports the corresponding time zone description
xtrace
Traces the execution of a program by printing the currently executed function
zdump
The time zone dumper
zic
The time zone compiler
ld.so
The helper program for shared library executables
libBrokenLocale
Used internally by Glibc as a gross hack to get broken programs (e.g., some Motif applications) running. See comments in glibc-2.19/locale/broken_cur_max.c for more information
libSegFault
The segmentation fault signal handler, used by catchsegv
libanl
An asynchronous name lookup library
libc
The main C library
libcidn
Used internally by Glibc for handling internationalized domain names in the getaddrinfo() function
libcrypt
The cryptography library
libdl
The dynamic linking interface library
libg
Dummy library containing no functions. Previously was a runtime library for g++
libieee
Linking in this module forces error handling rules for math functions as defined by the Institute of Electrical and Electronic Engineers (IEEE). The default is POSIX.1 error handling
libm
The mathematical library
libmcheck
Turns on memory allocation checking when linked to
libmemusage
Used by memusage to help collect information about the memory usage of a program
libnsl
The network services library
libnss
The Name Service Switch libraries, containing functions for resolving host names, user names, group names, aliases, services, protocols, etc.
libpcprofile
Contains profiling functions used to track the amount of CPU time spent in specific source code lines
libpthread
The POSIX threads library
libresolv
Contains functions for creating, sending, and interpreting packets to the Internet domain name servers
librpcsvc
Contains functions providing miscellaneous RPC services
librt
Contains functions providing most of the interfaces specified by the POSIX.1b Realtime Extension
libthread_db
Contains functions useful for building debuggers for multi-threaded programs
libutil
Contains code for “standard” functions used in many different Unix utilities
6.10. Adjusting the Toolchain

Now that the final C libraries have been installed, it is time to adjust the toolchain so that it will link any newly compiled program against these new libraries.

First, backup the /tools linker, and replace it with the adjusted linker we made in chapter 5. We'll also create a link to its counterpart in /tools/$(gcc -dumpmachine)/bin:

mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(gcc -dumpmachine)/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld
Next, amend the GCC specs file so that it points to the new dynamic linker. Simply deleting all instances of “/tools” should leave us with the correct path to the dynamic linker. Also adjust the specs file so that GCC knows where to find the correct headers and Glibc start files. A sed command accomplishes this:

gcc -dumpspecs | sed -e 's@/tools@@g'                   \
    -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
    -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' >      \
    `dirname $(gcc --print-libgcc-file-name)`/specs
It is a good idea to visually inspect the specs file to verify the intended change was actually made.

It is imperative at this point to ensure that the basic functions (compiling and linking) of the adjusted toolchain are working as expected. To do this, perform the following sanity checks:

echo 'main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
If everything is working correctly, there should be no errors, and the output of the last command will be (allowing for platform-specific differences in dynamic linker name):

[Requesting program interpreter: /lib/ld-linux.so.2]
Note that /lib is now the prefix of our dynamic linker.

Now make sure that we're setup to use the correct startfiles:

grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
If everything is working correctly, there should be no errors, and the output of the last command will be:

/usr/lib/crt1.o succeeded
/usr/lib/crti.o succeeded
/usr/lib/crtn.o succeeded
Verify that the compiler is searching for the correct header files:

grep -B1 '^ /usr/include' dummy.log
This command should return successfully with the following output:

#include <...> search starts here:
 /usr/include
Next, verify that the new linker is being used with the correct search paths:

grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
If everything is working correctly, there should be no errors, and the output of the last command will be:

SEARCH_DIR("/usr/lib")
SEARCH_DIR("/lib");
Next make sure that we're using the correct libc:

grep "/lib.*/libc.so.6 " dummy.log
If everything is working correctly, there should be no errors, and the output of the last command (allowing for a lib64 directory on 64-bit hosts) will be:

attempt to open /lib/libc.so.6 succeeded
Lastly, make sure GCC is using the correct dynamic linker:

grep found dummy.log
If everything is working correctly, there should be no errors, and the output of the last command will be (allowing for platform-specific differences in dynamic linker name and a lib64 directory on 64-bit hosts):

found ld-linux.so.2 at /lib/ld-linux.so.2
If the output does not appear as shown above or is not received at all, then something is seriously wrong. Investigate and retrace the steps to find out where the problem is and correct it. The most likely reason is that something went wrong with the specs file adjustment. Any issues will need to be resolved before continuing on with the process.

Once everything is working correctly, clean up the test files:

rm -v dummy.c a.out dummy.log
6.11. Zlib-1.2.8
The Zlib package contains compression and decompression routines used by some programs.

Approximate build time:
less than 0.1 SBU
Required disk space:
4.6 MB
6.11.1. Installation of Zlib

Prepare Zlib for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
The shared library needs to be moved to /lib, and as a result the .so file in /usr/lib will need to be recreated:

mv -v /usr/lib/libz.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libz.so) /usr/lib/libz.so
6.11.2. Contents of Zlib

Installed libraries:
libz.{a,so}
Short Descriptions

libz
Contains compression and decompression functions used by some programs
6.12. File-5.17
The File package contains a utility for determining the type of a given file or files.

Approximate build time:
0.1 SBU
Required disk space:
12.5 MB
6.12.1. Installation of File

Prepare File for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.12.2. Contents of File

Installed programs:
file
Installed library:
libmagic.so
Short Descriptions

file
Tries to classify each given file; it does this by performing several tests—file system tests, magic number tests, and language tests
libmagic.so
Contains routines for magic number recognition, used by the file program
6.13. Binutils-2.24
The Binutils package contains a linker, an assembler, and other tools for handling object files.

Approximate build time:
2.0 SBU
Required disk space:
365 MB
6.13.1. Installation of Binutils

Verify that the PTYs are working properly inside the chroot environment by performing a simple test:

expect -c "spawn ls"
This command should output the following:

spawn ls
If, instead, the output includes the message below, then the environment is not set up for proper PTY operation. This issue needs to be resolved before running the test suites for Binutils and GCC:

The system has no more ptys.
Ask your system administrator to create more.
Suppress the installation of an outdated standards.info file as a newer one is installed later on in the Autoconf instructions:

rm -fv etc/standards.info
sed -i.bak '/^INFO/s/standards.info //' etc/Makefile.in
The Binutils documentation recommends building Binutils outside of the source directory in a dedicated build directory:

mkdir -v ../binutils-build
cd ../binutils-build
Prepare Binutils for compilation:

../binutils-2.24/configure --prefix=/usr --enable-shared
Compile the package:

make tooldir=/usr
The meaning of the make parameter:

tooldir=/usr
Normally, the tooldir (the directory where the executables will ultimately be located) is set to $(exec_prefix)/$(target_alias). For example, x86_64 machines would expand that to /usr/x86_64-unknown-linux-gnu. Because this is a custom system, this target-specific directory in /usr is not required. $(exec_prefix)/$(target_alias) would be used if the system was used to cross-compile (for example, compiling a package on an Intel machine that generates code that can be executed on PowerPC machines).
Important

The test suite for Binutils in this section is considered critical. Do not skip it under any circumstances.

Test the results:

make check
Install the package:

make tooldir=/usr install
6.13.2. Contents of Binutils

Installed programs:
addr2line, ar, as, c++filt, elfedit, gprof, ld, ld.bfd, nm, objcopy, objdump, ranlib, readelf, size, strings, and strip
Installed libraries:
libbfd.{a,so}, and libopcodes.{a,so}
Installed directory:
/usr/lib/ldscripts
Short Descriptions

addr2line
Translates program addresses to file names and line numbers; given an address and the name of an executable, it uses the debugging information in the executable to determine which source file and line number are associated with the address
ar
Creates, modifies, and extracts from archives
as
An assembler that assembles the output of gcc into object files
c++filt
Used by the linker to de-mangle C++ and Java symbols and to keep overloaded functions from clashing
elfedit
Updates the ELF header of ELF files
gprof
Displays call graph profile data
ld
A linker that combines a number of object and archive files into a single file, relocating their data and tying up symbol references
ld.bfd
Hard link to ld
nm
Lists the symbols occurring in a given object file
objcopy
Translates one type of object file into another
objdump
Displays information about the given object file, with options controlling the particular information to display; the information shown is useful to programmers who are working on the compilation tools
ranlib
Generates an index of the contents of an archive and stores it in the archive; the index lists all of the symbols defined by archive members that are relocatable object files
readelf
Displays information about ELF type binaries
size
Lists the section sizes and the total size for the given object files
strings
Outputs, for each given file, the sequences of printable characters that are of at least the specified length (defaulting to four); for object files, it prints, by default, only the strings from the initializing and loading sections while for other types of files, it scans the entire file
strip
Discards symbols from object files
libbfd
The Binary File Descriptor library
libopcodes
A library for dealing with opcodes—the “readable text” versions of instructions for the processor; it is used for building utilities like objdump.
6.14. GMP-5.1.3
The GMP package contains math libraries. These have useful functions for arbitrary precision arithmetic.

Approximate build time:
1.2 SBU
Required disk space:
50 MB
6.14.1. Installation of GMP

Note

If you are building for 32-bit x86, but you have a CPU which is capable of running 64-bit code and you have specified CFLAGS in the environment, the configure script will attempt to configure for 64-bits and fail. Avoid this by invoking the configure command below with

ABI=32 ./configure ...
Prepare GMP for compilation:

./configure --prefix=/usr --enable-cxx
The meaning of the new configure options:

--enable-cxx
This parameter enables C++ support
Compile the package:

make
Important

The test suite for GMP in this section is considered critical. Do not skip it under any circumstances.

Test the results:

make check 2>&1 | tee gmp-check-log
Ensure that all 185 tests in the test suite passed. Check the results by issuing the following command:

awk '/tests passed/{total+=$2} ; END{print total}' gmp-check-log
Install the package:

make install
If desired, install the documentation:

mkdir -v /usr/share/doc/gmp-5.1.3
cp    -v doc/{isa_abi_headache,configuration} doc/*.html \
         /usr/share/doc/gmp-5.1.3
6.14.2. Contents of GMP

Installed Libraries:
libgmp.{a,so} and libgmpxx.{a,so}
Installed directory:
/usr/share/doc/gmp-5.1.3
Short Descriptions

libgmp
Contains precision math functions.
libgmpxx
Contains C++ precision math functions.
6.15. MPFR-3.1.2
The MPFR package contains functions for multiple precision math.

Approximate build time:
0.8 SBU
Required disk space:
27 MB
6.15.1. Installation of MPFR

Prepare MPFR for compilation:

./configure --prefix=/usr        \
            --enable-thread-safe \
            --docdir=/usr/share/doc/mpfr-3.1.2
Compile the package:

make
Important

The test suite for MPFR in this section is considered critical. Do not skip it under any circumstances.

Test the results and ensure that all tests passed:

make check
Install the package:

make install
Install the documentation:

make html
make install-html
6.15.2. Contents of MPFR

Installed Libraries:
libmpfr.{a,so}
Installed directory:
/usr/share/doc/mpfr-3.1.2
Short Descriptions

libmpfr
Contains multiple-precision math functions.
6.16. MPC-1.0.2
The MPC package contains a library for the arithmetic of complex numbers with arbitrarily high precision and correct rounding of the result.

Approximate build time:
0.4 SBU
Required disk space:
10.2 MB
6.16.1. Installation of MPC

Prepare MPC for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.16.2. Contents of MPC

Installed Libraries:
libmpc.{a,so}
Short Descriptions

libmpc
Contains complex math functions
6.17. GCC-4.8.2
The GCC package contains the GNU compiler collection, which includes the C and C++ compilers.

Approximate build time:
55.6 SBU
Required disk space:
2.2 GB
6.17.1. Installation of GCC

As in Section 5.10, “GCC-4.8.2 - Pass 2”, apply the following sed to force the build to use the -fomit-frame-pointer compiler flag in order to ensure consistent compiler builds:

case `uname -m` in
  i?86) sed -i 's/^T_CFLAGS =$/& -fomit-frame-pointer/' gcc/Makefile.in ;;
esac
Also fix an error in one of the check Makefiles and disable one test in the g++ libmudflap test suite:

sed -i -e /autogen/d -e /check.sh/d fixincludes/Makefile.in 
mv -v libmudflap/testsuite/libmudflap.c++/pass41-frag.cxx{,.disable}
The GCC documentation recommends building GCC outside of the source directory in a dedicated build directory:

mkdir -v ../gcc-build
cd ../gcc-build
Prepare GCC for compilation:

SED=sed                          \
../gcc-4.8.2/configure           \
     --prefix=/usr               \
     --enable-shared             \
     --enable-threads=posix      \
     --enable-__cxa_atexit       \
     --enable-clocale=gnu        \
     --enable-languages=c,c++    \
     --disable-multilib          \
     --disable-bootstrap         \
     --with-system-zlib
Note that for other languages, there are some prerequisites that are not available. See the BLFS Book for instructions on how to build all the GCC supported languages.

The meaning of the new configure option:

SED=sed
Setting this environment variable prevents a hard-coded path to /tools/bin/sed.
--with-system-zlib
This switch tells GCC to link to the system installed copy of the Zlib library, rather than its own internal copy.
Compile the package:

make
Important

In this section, the test suite for GCC is considered critical. Do not skip it under any circumstance.

One set of tests in the GCC test suite is known to exhaust the stack, so increase the stack size prior to running the tests:

ulimit -s 32768
Test the results, but do not stop at errors:

make -k check
To receive a summary of the test suite results, run:

../gcc-4.8.2/contrib/test_summary
For only the summaries, pipe the output through grep -A7 Summ.

Results can be compared with those located at http://www.linuxfromscratch.org/lfs/build-logs/7.5/ and http://gcc.gnu.org/ml/gcc-testresults/.

A few unexpected failures cannot always be avoided. The GCC developers are usually aware of these issues, but have not resolved them yet. In particular, the libmudflap tests are known to be particularly problematic as a result of a bug in GCC (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=20003). Unless the test results are vastly different from those at the above URL, it is safe to continue.

Install the package:

make install
Some packages expect the C preprocessor to be installed in the /lib directory. To support those packages, create this symlink:

ln -sv ../usr/bin/cpp /lib
Many packages use the name cc to call the C compiler. To satisfy those packages, create a symlink:

ln -sv gcc /usr/bin/cc
Now that our final toolchain is in place, it is important to again ensure that compiling and linking will work as expected. We do this by performing the same sanity checks as we did earlier in the chapter:

echo 'main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
If everything is working correctly, there should be no errors, and the output of the last command will be (allowing for platform-specific differences in dynamic linker name):

[Requesting program interpreter: /lib/ld-linux.so.2]
Now make sure that we're setup to use the correct startfiles:

grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
If everything is working correctly, there should be no errors, and the output of the last command will be:

/usr/lib/gcc/i686-pc-linux-gnu/4.8.2/../../../crt1.o succeeded
/usr/lib/gcc/i686-pc-linux-gnu/4.8.2/../../../crti.o succeeded
/usr/lib/gcc/i686-pc-linux-gnu/4.8.2/../../../crtn.o succeeded
Depending on your machine architecture, the above may differ slightly, the difference usually being the name of the directory after /usr/lib/gcc. If your machine is a 64-bit system, you may also see a directory named lib64 towards the end of the string. The important thing to look for here is that gcc has found all three crt*.o files under the /usr/lib directory.

Verify that the compiler is searching for the correct header files:

grep -B4 '^ /usr/include' dummy.log
This command should return successfully with the following output:

#include <...> search starts here:
 /usr/lib/gcc/i686-pc-linux-gnu/4.8.2/include
 /usr/local/include
 /usr/lib/gcc/i686-pc-linux-gnu/4.8.2/include-fixed
 /usr/include
Again, note that the directory named after your target triplet may be different than the above, depending on your architecture.

Note

As of version 4.3.0, GCC now unconditionally installs the limits.h file into the private include-fixed directory, and that directory is required to be in place.

Next, verify that the new linker is being used with the correct search paths:

grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
If everything is working correctly, there should be no errors, and the output of the last command will be:

SEARCH_DIR("/usr/i686-pc-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");
A 64-bit system may see a few more directories. For example, here is the output from an x86_64 machine:

SEARCH_DIR("/usr/x86_64-unknown-linux-gnu/lib64")
SEARCH_DIR("/usr/local/lib64")
SEARCH_DIR("/lib64")
SEARCH_DIR("/usr/lib64")
SEARCH_DIR("/usr/x86_64-unknown-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");
Next make sure that we're using the correct libc:

grep "/lib.*/libc.so.6 " dummy.log
If everything is working correctly, there should be no errors, and the output of the last command (allowing for a lib64 directory on 64-bit hosts) will be:

attempt to open /lib/libc.so.6 succeeded
Lastly, make sure GCC is using the correct dynamic linker:

grep found dummy.log
If everything is working correctly, there should be no errors, and the output of the last command will be (allowing for platform-specific differences in dynamic linker name and a lib64 directory on 64-bit hosts):

found ld-linux.so.2 at /lib/ld-linux.so.2
If the output does not appear as shown above or is not received at all, then something is seriously wrong. Investigate and retrace the steps to find out where the problem is and correct it. The most likely reason is that something went wrong with the specs file adjustment. Any issues will need to be resolved before continuing on with the process.

Once everything is working correctly, clean up the test files:

rm -v dummy.c a.out dummy.log
Finally, move a misplaced file:

mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib
6.17.2. Contents of GCC

Installed programs:
c++, cc (link to gcc), cpp, g++, gcc, gcc-ar, gcc-nm, gcc-ranlib, and gcov
Installed libraries:
libasan.{a,so}, libatomic.{a,so}, libgcc.a, libgcc_eh.a, libgcc_s.so, libgcov.a, libgomp.{a,so}, libiberty.a, libitm.{a,so}, liblto_plugin.so, libmudflap.{a,so}, libmudflapth.{a,so}, libquadmath.{a,so}, libssp.{a,so}, libssp_nonshared.a, libstdc++.{a,so}, libsupc++.a and libtsan.{a,so}
Installed directories:
/usr/include/c++, /usr/lib/gcc, /usr/libexec/gcc, /usr/share/gcc-4.8.2
Short Descriptions

c++
The C++ compiler
cc
The C compiler
cpp
The C preprocessor; it is used by the compiler to expand the #include, #define, and similar statements in the source files
g++
The C++ compiler
gcc
The C compiler
gcc-ar
A wrapper around ar that adds a plugin to the command line. This program is only used to add "link time optization" and is not useful with the default build options.
gcc-nm
A wrapper around nm that adds a plugin to the command line. This program is only used to add "link time optization" and is not useful with the default build options.
gcc-ranlib
A wrapper around ranlib that adds a plugin to the command line. This program is only used to add "link time optization" and is not useful with the default build options.
gcov
A coverage testing tool; it is used to analyze programs to determine where optimizations will have the most effect
libasan
The Address Sanitizer runtime library
libgcc
Contains run-time support for gcc
libgcov
This library is linked in to a program when GCC is instructed to enable profiling
libgomp
GNU implementation of the OpenMP API for multi-platform shared-memory parallel programming in C/C++ and Fortran
libiberty
Contains routines used by various GNU programs, including getopt, obstack, strerror, strtol, and strtoul
liblto_plugin
GCC's Link Time Optimization (LTO) plugin allows GCC to perform optimizations across compilation units.
libmudflap
Contains routines that support GCC's bounds checking functionality
libquadmath
GCC Quad Precision Math Library API
libssp
Contains routines supporting GCC's stack-smashing protection functionality
libstdc++
The standard C++ library
libsupc++
Provides supporting routines for the C++ programming language
libtsan
The Thread Sanitizer runtime library
6.18. Sed-4.2.2
The Sed package contains a stream editor.

Approximate build time:
0.2 SBU
Required disk space:
6.7 MB
6.18.1. Installation of Sed

Prepare Sed for compilation:

./configure --prefix=/usr --bindir=/bin --htmldir=/usr/share/doc/sed-4.2.2
The meaning of the new configure option:

--htmldir
This sets the directory where the HTML documentation will be installed to.
Compile the package:

make
Generate the HTML documentation:

make html
To test the results, issue:

make check
Install the package:

make install
Install the HTML documentation:

make -C doc install-html
6.18.2. Contents of Sed

Installed program:
sed
Installed directory:
/usr/share/doc/sed-4.2.2
Short Descriptions

sed
Filters and transforms text files in a single pass
6.19. Bzip2-1.0.6
The Bzip2 package contains programs for compressing and decompressing files. Compressing text files with bzip2 yields a much better compression percentage than with the traditional gzip.

Approximate build time:
less than 0.1 SBU
Required disk space:
6.9 MB
6.19.1. Installation of Bzip2

Apply a patch that will install the documentation for this package:

patch -Np1 -i ../bzip2-1.0.6-install_docs-1.patch
The following command ensures installation of symbolic links are relative:

sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
Ensure the man pages are installed into the correct location:

sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile
Prepare Bzip2 for compilation with:

make -f Makefile-libbz2_so
make clean
The meaning of the make parameter:

-f Makefile-libbz2_so
This will cause Bzip2 to be built using a different Makefile file, in this case the Makefile-libbz2_so file, which creates a dynamic libbz2.so library and links the Bzip2 utilities against it.
Compile and test the package:

make
Install the programs:

make PREFIX=/usr install
Install the shared bzip2 binary into the /bin directory, make some necessary symbolic links, and clean up:

cp -v bzip2-shared /bin/bzip2
cp -av libbz2.so* /lib
ln -sv ../../lib/libbz2.so.1.0 /usr/lib/libbz2.so
rm -v /usr/bin/{bunzip2,bzcat,bzip2}
ln -sv bzip2 /bin/bunzip2
ln -sv bzip2 /bin/bzcat
6.19.2. Contents of Bzip2

Installed programs:
bunzip2 (link to bzip2), bzcat (link to bzip2), bzcmp (link to bzdiff), bzdiff, bzegrep (link to bzgrep), bzfgrep (link to bzgrep), bzgrep, bzip2, bzip2recover, bzless (link to bzmore), and bzmore
Installed libraries:
libbz2.{a,so}
Installed directory:
/usr/share/doc/bzip2-1.0.6
Short Descriptions

bunzip2
Decompresses bzipped files
bzcat
Decompresses to standard output
bzcmp
Runs cmp on bzipped files
bzdiff
Runs diff on bzipped files
bzegrep
Runs egrep on bzipped files
bzfgrep
Runs fgrep on bzipped files
bzgrep
Runs grep on bzipped files
bzip2
Compresses files using the Burrows-Wheeler block sorting text compression algorithm with Huffman coding; the compression rate is better than that achieved by more conventional compressors using “Lempel-Ziv” algorithms, like gzip
bzip2recover
Tries to recover data from damaged bzipped files
bzless
Runs less on bzipped files
bzmore
Runs more on bzipped files
libbz2*
The library implementing lossless, block-sorting data compression, using the Burrows-Wheeler algorithm
6.20. Pkg-config-0.28
The pkg-config package contains a tool for passing the include path and/or library paths to build tools during the configure and make file execution.

Approximate build time:
0.4 SBU
Required disk space:
31 MB
6.20.1. Installation of Pkg-config

Prepare Pkg-config for compilation:

./configure --prefix=/usr         \
            --with-internal-glib  \
            --disable-host-tool   \
            --docdir=/usr/share/doc/pkg-config-0.28
The meaning of the new configure options:

--with-internal-glib
This will allow pkg-config to use its internal version of Glib because an external version is not available in LFS.
--disable-host-tool
This option disables the creation of an undesired hard link to the pkg-config program.
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.20.2. Contents of Pkg-config

Installed program:
pkg-config
Installed directory:
/usr/share/doc/pkg-config-0.28
Short Descriptions

pkg-config
returns meta information for the specified library or package.
6.21. Ncurses-5.9
The Ncurses package contains libraries for terminal-independent handling of character screens.

Approximate build time:
0.6 SBU
Required disk space:
40 MB
6.21.1. Installation of Ncurses

Prepare Ncurses for compilation:

./configure --prefix=/usr           \
            --mandir=/usr/share/man \
            --with-shared           \
            --without-debug         \
            --enable-pc-files       \
            --enable-widec
The meaning of the configure option:

--enable-widec
This switch causes wide-character libraries (e.g., libncursesw.so.5.9) to be built instead of normal ones (e.g., libncurses.so.5.9). These wide-character libraries are usable in both multibyte and traditional 8-bit locales, while normal libraries work properly only in 8-bit locales. Wide-character and normal libraries are source-compatible, but not binary-compatible.
--enable-pc-files
This switch generates and installs .pc files for pkg-config.
Compile the package:

make
This package has a test suite, but it can only be run after the package has been installed. The tests reside in the test/ directory. See the README file in that directory for further details.

Install the package:

make install
Move the shared libraries to the /lib directory, where they are expected to reside:

mv -v /usr/lib/libncursesw.so.5* /lib
Because the libraries have been moved, one symlink points to a non-existent file. Recreate it:

ln -sfv ../../lib/$(readlink /usr/lib/libncursesw.so) /usr/lib/libncursesw.so
Many applications still expect the linker to be able to find non-wide-character Ncurses libraries. Trick such applications into linking with wide-character libraries by means of symlinks and linker scripts:

for lib in ncurses form panel menu ; do
    rm -vf                    /usr/lib/lib${lib}.so
    echo "INPUT(-l${lib}w)" > /usr/lib/lib${lib}.so
    ln -sfv lib${lib}w.a      /usr/lib/lib${lib}.a
    ln -sfv ${lib}w.pc        /usr/lib/pkgconfig/${lib}.pc
done

ln -sfv libncurses++w.a /usr/lib/libncurses++.a
Finally, make sure that old applications that look for -lcurses at build time are still buildable:

rm -vf                     /usr/lib/libcursesw.so
echo "INPUT(-lncursesw)" > /usr/lib/libcursesw.so
ln -sfv libncurses.so      /usr/lib/libcurses.so
ln -sfv libncursesw.a      /usr/lib/libcursesw.a
ln -sfv libncurses.a       /usr/lib/libcurses.a
If desired, install the Ncurses documentation:

mkdir -v       /usr/share/doc/ncurses-5.9
cp -v -R doc/* /usr/share/doc/ncurses-5.9
Note

The instructions above don't create non-wide-character Ncurses libraries since no package installed by compiling from sources would link against them at runtime. If you must have such libraries because of some binary-only application or to be compliant with LSB, build the package again with the following commands:

make distclean
./configure --prefix=/usr    \
            --with-shared    \
            --without-normal \
            --without-debug  \
            --without-cxx-binding
make sources libs
cp -av lib/lib*.so.5* /usr/lib
6.21.2. Contents of Ncurses

Installed programs:
captoinfo (link to tic), clear, infocmp, infotocap (link to tic), ncursesw5-config, reset (link to tset), tabs, tic, toe, tput, and tset
Installed libraries:
libcursesw.{a,so} (symlink and linker script to libncursesw.{a,so}), libformw.{a,so}, libmenuw.{a,so}, libncurses++w.a, libncursesw.{a,so}, libpanelw.{a,so} and their non-wide-character counterparts without "w" in the library names.
Installed directories:
/usr/share/tabset, /usr/share/terminfo, /usr/share/doc/ncurses-5.9
Short Descriptions

captoinfo
Converts a termcap description into a terminfo description
clear
Clears the screen, if possible
infocmp
Compares or prints out terminfo descriptions
infotocap
Converts a terminfo description into a termcap description
ncursesw5-config
Provides configuration information for ncurses
reset
Reinitializes a terminal to its default values
tabs
Clears and sets tab stops on a terminal
tic
The terminfo entry-description compiler that translates a terminfo file from source format into the binary format needed for the ncurses library routines. A terminfo file contains information on the capabilities of a certain terminal
toe
Lists all available terminal types, giving the primary name and description for each
tput
Makes the values of terminal-dependent capabilities available to the shell; it can also be used to reset or initialize a terminal or report its long name
tset
Can be used to initialize terminals
libcurses
A link to libncurses
libncurses
Contains functions to display text in many complex ways on a terminal screen; a good example of the use of these functions is the menu displayed during the kernel's make menuconfig
libform
Contains functions to implement forms
libmenu
Contains functions to implement menus
libpanel
Contains functions to implement panels
6.22. Shadow-4.1.5.1
The Shadow package contains programs for handling passwords in a secure way.

Approximate build time:
0.2 SBU
Required disk space:
42 MB
6.22.1. Installation of Shadow

Note

If you would like to enforce the use of strong passwords, refer to http://www.linuxfromscratch.org/blfs/view/svn/postlfs/cracklib.html for installing CrackLib prior to building Shadow. Then add --with-libcrack to the configure command below.

Disable the installation of the groups program and its man pages, as Coreutils provides a better version:

sed -i 's/groups$(EXEEXT) //' src/Makefile.in
find man -name Makefile.in -exec sed -i 's/groups\.1 / /' {} \;
Instead of using the default crypt method, use the more secure SHA-512 method of password encryption, which also allows passwords longer than 8 characters. It is also necessary to change the obsolete /var/spool/mail location for user mailboxes that Shadow uses by default to the /var/mail location used currently:

sed -i -e 's@#ENCRYPT_METHOD DES@ENCRYPT_METHOD SHA512@' \
       -e 's@/var/spool/mail@/var/mail@' etc/login.defs
Note

If you chose to build Shadow with Cracklib support, run the following:

sed -i 's@DICTPATH.*@DICTPATH\t/lib/cracklib/pw_dict@' etc/login.defs
Prepare Shadow for compilation:

./configure --sysconfdir=/etc
Compile the package:

make
This package does not come with a test suite.

Install the package:

make install
Move a misplaced program to its proper location:

mv -v /usr/bin/passwd /bin
6.22.2. Configuring Shadow

This package contains utilities to add, modify, and delete users and groups; set and change their passwords; and perform other administrative tasks. For a full explanation of what password shadowing means, see the doc/HOWTO file within the unpacked source tree. If using Shadow support, keep in mind that programs which need to verify passwords (display managers, FTP programs, pop3 daemons, etc.) must be Shadow-compliant. That is, they need to be able to work with shadowed passwords.

To enable shadowed passwords, run the following command:

pwconv
To enable shadowed group passwords, run:

grpconv
Shadow's stock configuration for the useradd utility has a few caveats that need some explanation. First, the default action for the useradd utility is to create the user and a group of the same name as the user. By default the user ID (UID) and group ID (GID) numbers will begin with 1000. This means if you don't pass parameters to useradd, each user will be a member of a unique group on the system. If this behaviour is undesirable, you'll need to pass the -g parameter to useradd. The default parameters are stored in the /etc/default/useradd file. You may need to modify two parameters in this file to suit your particular needs.

/etc/default/useradd Parameter Explanations

GROUP=1000
This parameter sets the beginning of the group numbers used in the /etc/group file. You can modify it to anything you desire. Note that useradd will never reuse a UID or GID. If the number identified in this parameter is used, it will use the next available number after this. Note also that if you don't have a group 1000 on your system the first time you use useradd without the -g parameter, you'll get a message displayed on the terminal that says: useradd: unknown GID 1000. You may disregard this message and group number 1000 will be used.
CREATE_MAIL_SPOOL=yes
This parameter causes useradd to create a mailbox file for the newly created user. useradd will make the group ownership of this file to the mail group with 0660 permissions. If you would prefer that these mailbox files are not created by useradd, issue the following command:
sed -i 's/yes/no/' /etc/default/useradd
6.22.3. Setting the root password

Choose a password for user root and set it by running:

passwd root
6.22.4. Contents of Shadow

Installed programs:
chage, chfn, chgpasswd, chpasswd, chsh, expiry, faillog, gpasswd, groupadd, groupdel, groupmems, groupmod, grpck, grpconv, grpunconv, lastlog, login, logoutd, newgrp, newusers, nologin, passwd, pwck, pwconv, pwunconv, sg (link to newgrp), su, useradd, userdel, usermod, vigr (link to vipw), and vipw
Installed directory:
/etc/default
Short Descriptions

chage
Used to change the maximum number of days between obligatory password changes
chfn
Used to change a user's full name and other information
chgpasswd
Used to update group passwords in batch mode
chpasswd
Used to update user passwords in batch mode
chsh
Used to change a user's default login shell
expiry
Checks and enforces the current password expiration policy
faillog
Is used to examine the log of login failures, to set a maximum number of failures before an account is blocked, or to reset the failure count
gpasswd
Is used to add and delete members and administrators to groups
groupadd
Creates a group with the given name
groupdel
Deletes the group with the given name
groupmems
Allows a user to administer his/her own group membership list without the requirement of super user privileges.
groupmod
Is used to modify the given group's name or GID
grpck
Verifies the integrity of the group files /etc/group and /etc/gshadow
grpconv
Creates or updates the shadow group file from the normal group file
grpunconv
Updates /etc/group from /etc/gshadow and then deletes the latter
lastlog
Reports the most recent login of all users or of a given user
login
Is used by the system to let users sign on
logoutd
Is a daemon used to enforce restrictions on log-on time and ports
newgrp
Is used to change the current GID during a login session
newusers
Is used to create or update an entire series of user accounts
nologin
Displays a message that an account is not available. Designed to be used as the default shell for accounts that have been disabled
passwd
Is used to change the password for a user or group account
pwck
Verifies the integrity of the password files /etc/passwd and /etc/shadow
pwconv
Creates or updates the shadow password file from the normal password file
pwunconv
Updates /etc/passwd from /etc/shadow and then deletes the latter
sg
Executes a given command while the user's GID is set to that of the given group
su
Runs a shell with substitute user and group IDs
useradd
Creates a new user with the given name, or updates the default new-user information
userdel
Deletes the given user account
usermod
Is used to modify the given user's login name, User Identification (UID), shell, initial group, home directory, etc.
vigr
Edits the /etc/group or /etc/gshadow files
vipw
Edits the /etc/passwd or /etc/shadow files
6.23. Psmisc-22.20
The Psmisc package contains programs for displaying information about running processes.

Approximate build time:
less than 0.1 SBU
Required disk space:
4.2 MB
6.23.1. Installation of Psmisc

Prepare Psmisc for compilation:

./configure --prefix=/usr
Compile the package:

make
This package does not come with a test suite.

Install the package:

make install
Finally, move the killall and fuser programs to the location specified by the FHS:

mv -v /usr/bin/fuser   /bin
mv -v /usr/bin/killall /bin
6.23.2. Contents of Psmisc

Installed programs:
fuser, killall, peekfd, prtstat, pstree, and pstree.x11 (link to pstree)
Short Descriptions

fuser
Reports the Process IDs (PIDs) of processes that use the given files or file systems
killall
Kills processes by name; it sends a signal to all processes running any of the given commands
peekfd
Peek at file descriptors of a running process, given its PID
prtstat
Prints information about a process
pstree
Displays running processes as a tree
pstree.x11
Same as pstree, except that it waits for confirmation before exiting
6.24. Procps-ng-3.3.9
The Procps-ng package contains programs for monitoring processes.

Approximate build time:
0.2 SBU
Required disk space:
13 MB
6.24.1. Installation of Procps-ng

Now prepare procps-ng for compilation:

./configure --prefix=/usr                           \
            --exec-prefix=                          \
            --libdir=/usr/lib                       \
            --docdir=/usr/share/doc/procps-ng-3.3.9 \
            --disable-static                        \
            --disable-kill
The meaning of the configure options:

--disable-kill
This switch disables building the kill command that was installed in the util-linux package.
Compile the package:

make
The test suite needs some custom modifications for LFS. Remove the test that fails when scripting does not use a tty device. To run the test suite, run the following commands:

sed -i -r 's|(pmap_initname)\\\$|\1|' testsuite/pmap.test/pmap.exp
make check
Install the package:

make install
Finally, move essential files to a location that can be found if /usr is not mounted.

mv -v /usr/bin/pidof /bin
mv -v /usr/lib/libprocps.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libprocps.so) /usr/lib/libprocps.so
6.24.2. Contents of Procps-ng

Installed programs:
free, pgrep, pidof, pkill, pmap, ps, pwdx, slabtop, sysctl, tload, top, uptime, vmstat, w, and, watch
Installed library:
libprocps.so
Short Descriptions

free
Reports the amount of free and used memory (both physical and swap memory) in the system
pgrep
Looks up processes based on their name and other attributes
pidof
Looks up processes based on their name and other attributes
pkill
Signals processes based on their name and other attributes
pmap
Reports the memory map of the given process
ps
Lists the current running processes
pwdx
Reports the current working directory of a process
slabtop
Displays detailed kernel slap cache information in real time
sysctl
Modifies kernel parameters at run time
tload
Prints a graph of the current system load average
top
Displays a list of the most CPU intensive processes; it provides an ongoing look at processor activity in real time
uptime
Reports how long the system has been running, how many users are logged on, and the system load averages
vmstat
Reports virtual memory statistics, giving information about processes, memory, paging, block Input/Output (IO), traps, and CPU activity
w
Shows which users are currently logged on, where, and since when
watch
Runs a given command repeatedly, displaying the first screen-full of its output; this allows a user to watch the output change over time
libprocps
Contains the functions used by most programs in this package
6.25. E2fsprogs-1.42.9
The E2fsprogs package contains the utilities for handling the ext2 file system. It also supports the ext3 and ext4 journaling file systems.

Approximate build time:
1.7 SBU
Required disk space:
64 MB
6.25.1. Installation of E2fsprogs

First fix a problem with running regression tests in the LFS chroot environment:

sed -i -e 's|^LD_LIBRARY_PATH.*|&:/tools/lib|' tests/test_config
The E2fsprogs documentation recommends that the package be built in a subdirectory of the source tree:

mkdir -v build
cd build
Prepare E2fsprogs for compilation:

LIBS=-L/tools/lib                    \
CFLAGS=-I/tools/include              \
PKG_CONFIG_PATH=/tools/lib/pkgconfig \
../configure --prefix=/usr           \
             --with-root-prefix=""   \
             --enable-elf-shlibs     \
             --disable-libblkid      \
             --disable-libuuid       \
             --disable-uuidd         \
             --disable-fsck
The meaning of the environment variable and configure options:

PKG_CONFIG_PATH, LIBS, CFLAGS
These variables enable e2fsprogs to be built using the Section 5.33, “Util-linux-2.24.1” package built earlier.
--with-root-prefix=""
Certain programs (such as the e2fsck program) are considered essential programs. When, for example, /usr is not mounted, these programs still need to be available. They belong in directories like /lib and /sbin. If this option is not passed to E2fsprogs' configure, the programs are installed into the /usr directory.
--enable-elf-shlibs
This creates the shared libraries which some programs in this package use.
--disable-*
This prevents E2fsprogs from building and installing the libuuid and libblkid libraries, the uuidd daemon, and the fsck wrapper, as Util-Linux installed all of them earlier.
Compile the package:

make
To test the results, issue:

make check
One of the E2fsprogs tests will attempt to allocate 256 MB of memory. If you do not have significantly more RAM than this, be sure to enable sufficient swap space for the test. See Section 2.3, “Creating a File System on the Partition” and Section 2.4, “Mounting the New Partition” for details on creating and enabling swap space. Additionally, three tests try to allocate a two terabyte partition and will fail unless you have at least that much unused disk space available.

Install the binaries, documentation, and shared libraries:

make install
Install the static libraries and headers:

make install-libs
Make the installed static libraries writable so debugging symbols can be removed later:

chmod -v u+w /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a
This package installs a gzipped .info file but doesn't update the system-wide dir file. Unzip this file and then update the system dir file using the following commands.

gunzip -v /usr/share/info/libext2fs.info.gz
install-info --dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info
If desired, create and install some additional documentation by issuing the following commands:

makeinfo -o      doc/com_err.info ../lib/et/com_err.texinfo
install -v -m644 doc/com_err.info /usr/share/info
install-info --dir-file=/usr/share/info/dir /usr/share/info/com_err.info
6.25.2. Contents of E2fsprogs

Installed programs:
badblocks, chattr, compile_et, debugfs, dumpe2fs,e2freefrag, e2fsck, e2image, e2label, e2undo, e4defrag, filefrag, fsck.ext2, fsck.ext3, fsck.ext4, fsck.ext4dev, logsave, lsattr, mk_cmds, mke2fs, mkfs.ext2, mkfs.ext3, mkfs.ext4, mkfs.ext4dev, resize2fs, and tune2fs
Installed libraries:
libcom_err.{a,so}, libe2p.{a,so}, libext2fs.{a,so}, libquota.a, and libss.{a,so}
Installed directory:
/usr/include/e2p, /usr/include/et, /usr/include/ext2fs, /usr/include/quota, /usr/include/ss, /usr/share/et, /usr/share/ss
Short Descriptions

badblocks
Searches a device (usually a disk partition) for bad blocks
chattr
Changes the attributes of files on an ext2 file system; it also changes ext3 file systems, the journaling version of ext2 file systems
compile_et
An error table compiler; it converts a table of error-code names and messages into a C source file suitable for use with the com_err library
debugfs
A file system debugger; it can be used to examine and change the state of an ext2 file system
dumpe2fs
Prints the super block and blocks group information for the file system present on a given device
e2freefrag
Reports free space fragmentation information
e2fsck
Is used to check, and optionally repair ext2 file systems and ext3 file systems
e2image
Is used to save critical ext2 file system data to a file
e2label
Displays or changes the file system label on the ext2 file system present on a given device
e2undo
Replays the undo log undo_log for an ext2/ext3/ext4 filesystem found on a device. This can be used to undo a failed operation by an e2fsprogs program.
e4defrag
Online defragmenter for ext4 filesystems
filefrag
Reports on how badly fragmented a particular file might be
fsck.ext2
By default checks ext2 file systems. This is a hard link to e2fsck.
fsck.ext3
By default checks ext3 file systems. This is a hard link to e2fsck.
fsck.ext4
By default checks ext4 file systems. This is a hard link to e2fsck.
fsck.ext4dev
By default checks ext4 development file systems. This is a hard link to e2fsck.
logsave
Saves the output of a command in a log file
lsattr
Lists the attributes of files on a second extended file system
mk_cmds
Converts a table of command names and help messages into a C source file suitable for use with the libss subsystem library
mke2fs
Creates an ext2 or ext3 file system on the given device
mkfs.ext2
By default creates ext2 file systems. This is a hard link to mke2fs.
mkfs.ext3
By default creates ext3 file systems. This is a hard link to mke2fs.
mkfs.ext4
By default creates ext4 file systems. This is a hard link to mke2fs.
mkfs.ext4dev
By default creates ext4 development file systems. This is a hard link to mke2fs.
mklost+found
Used to create a lost+found directory on an ext2 file system; it pre-allocates disk blocks to this directory to lighten the task of e2fsck
resize2fs
Can be used to enlarge or shrink an ext2 file system
tune2fs
Adjusts tunable file system parameters on an ext2 file system
libcom_err
The common error display routine
libe2p
Used by dumpe2fs, chattr, and lsattr
libext2fs
Contains routines to enable user-level programs to manipulate an ext2 file system
libquota
Provides an interface for creating and updating quota files and ext4 superblock fields
libss
Used by debugfs
6.26. Coreutils-8.22
The Coreutils package contains utilities for showing and setting the basic system characteristics.

Approximate build time:
3.4 SBU
Required disk space:
116 MB
6.26.1. Installation of Coreutils

POSIX requires that programs from Coreutils recognize character boundaries correctly even in multibyte locales. The following patch fixes this non-compliance and other internationalization-related bugs:

patch -Np1 -i ../coreutils-8.22-i18n-4.patch
Note

In the past, many bugs were found in this patch. When reporting new bugs to Coreutils maintainers, please check first if they are reproducible without this patch.

Now prepare Coreutils for compilation:

FORCE_UNSAFE_CONFIGURE=1 ./configure \
            --prefix=/usr            \
            --enable-no-install-program=kill,uptime
The meaning of the configure options:

--enable-no-install-program=kill,uptime
The purpose of this switch is to prevent Coreutils from installing binaries that will be installed by other packages later.
Compile the package:

make
Skip down to “Install the package” if not running the test suite.

Now the test suite is ready to be run. First, run the tests that are meant to be run as user root:

make NON_ROOT_USERNAME=nobody check-root
We're going to run the remainder of the tests as the nobody user. Certain tests, however, require that the user be a member of more than one group. So that these tests are not skipped we'll add a temporary group and make the user nobody a part of it:

echo "dummy:x:1000:nobody" >> /etc/group
Fix some of the permissions so that the non-root user can compile and run the tests:

chown -Rv nobody . 
Now run the tests. Make sure the PATH in the su environment includes /tools/bin.

su nobody -s /bin/bash \
          -c "PATH=$PATH make RUN_EXPENSIVE_TESTS=yes check"
Remove the temporary group:

sed -i '/dummy/d' /etc/group
Install the package:

make install
Move programs to the locations specified by the FHS:

mv -v /usr/bin/{cat,chgrp,chmod,chown,cp,date,dd,df,echo} /bin
mv -v /usr/bin/{false,ln,ls,mkdir,mknod,mv,pwd,rm} /bin
mv -v /usr/bin/{rmdir,stty,sync,true,uname,test,[} /bin
mv -v /usr/bin/chroot /usr/sbin
mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
sed -i s/\"1\"/\"8\"/1 /usr/share/man/man8/chroot.8
Some of the scripts in the LFS-Bootscripts package depend on head, sleep, and nice. As /usr may not be available during the early stages of booting, those binaries need to be on the root partition:

mv -v /usr/bin/{head,sleep,nice} /bin
6.26.2. Contents of Coreutils

Installed programs:
[, base64, basename, cat, chcon, chgrp, chmod, chown, chroot, cksum, comm, cp, csplit, cut, date, dd, df, dir, dircolors, dirname, du, echo, env, expand, expr, factor, false, fmt, fold, groups, head, hostid, id, install, join, link, ln, logname, ls, md5sum, mkdir, mkfifo, mknod, mktemp, mv, nice, nl, nohup, nproc, numfmt, od, paste, pathchk, pinky, pr, printenv, printf, ptx, pwd, readlink, realpath, rm, rmdir, runcon, seq, sha1sum, sha224sum, sha256sum, sha384sum, sha512sum, shred, shuf, sleep, sort, split, stat, stdbuf, stty, sum, sync, tac, tail, tee, test, timeout, touch, tr, true, truncate, tsort, tty, uname, unexpand, uniq, unlink, users, vdir, wc, who, whoami, and yes
Installed library:
libstdbuf.so
Installed directory:
/usr/libexec/coreutils
Short Descriptions

base64
Encodes and decodes data according to the base64 (RFC 3548) specification
basename
Strips any path and a given suffix from a file name
cat
Concatenates files to standard output
chcon
Changes security context for files and directories
chgrp
Changes the group ownership of files and directories
chmod
Changes the permissions of each file to the given mode; the mode can be either a symbolic representation of the changes to make or an octal number representing the new permissions
chown
Changes the user and/or group ownership of files and directories
chroot
Runs a command with the specified directory as the / directory
cksum
Prints the Cyclic Redundancy Check (CRC) checksum and the byte counts of each specified file
comm
Compares two sorted files, outputting in three columns the lines that are unique and the lines that are common
cp
Copies files
csplit
Splits a given file into several new files, separating them according to given patterns or line numbers and outputting the byte count of each new file
cut
Prints sections of lines, selecting the parts according to given fields or positions
date
Displays the current time in the given format, or sets the system date
dd
Copies a file using the given block size and count, while optionally performing conversions on it
df
Reports the amount of disk space available (and used) on all mounted file systems, or only on the file systems holding the selected files
dir
Lists the contents of each given directory (the same as the ls command)
dircolors
Outputs commands to set the LS_COLOR environment variable to change the color scheme used by ls
dirname
Strips the non-directory suffix from a file name
du
Reports the amount of disk space used by the current directory, by each of the given directories (including all subdirectories) or by each of the given files
echo
Displays the given strings
env
Runs a command in a modified environment
expand
Converts tabs to spaces
expr
Evaluates expressions
factor
Prints the prime factors of all specified integer numbers
false
Does nothing, unsuccessfully; it always exits with a status code indicating failure
fmt
Reformats the paragraphs in the given files
fold
Wraps the lines in the given files
groups
Reports a user's group memberships
head
Prints the first ten lines (or the given number of lines) of each given file
hostid
Reports the numeric identifier (in hexadecimal) of the host
id
Reports the effective user ID, group ID, and group memberships of the current user or specified user
install
Copies files while setting their permission modes and, if possible, their owner and group
join
Joins the lines that have identical join fields from two separate files
link
Creates a hard link with the given name to a file
ln
Makes hard links or soft (symbolic) links between files
logname
Reports the current user's login name
ls
Lists the contents of each given directory
md5sum
Reports or checks Message Digest 5 (MD5) checksums
mkdir
Creates directories with the given names
mkfifo
Creates First-In, First-Outs (FIFOs), a “named pipe” in UNIX parlance, with the given names
mknod
Creates device nodes with the given names; a device node is a character special file, a block special file, or a FIFO
mktemp
Creates temporary files in a secure manner; it is used in scripts
mv
Moves or renames files or directories
nice
Runs a program with modified scheduling priority
nl
Numbers the lines from the given files
nohup
Runs a command immune to hangups, with its output redirected to a log file
nproc
Prints the number of processing units available to a process
numfmt
Converts numbers to or from human-readable strings
od
Dumps files in octal and other formats
paste
Merges the given files, joining sequentially corresponding lines side by side, separated by tab characters
pathchk
Checks if file names are valid or portable
pinky
Is a lightweight finger client; it reports some information about the given users
pr
Paginates and columnates files for printing
printenv
Prints the environment
printf
Prints the given arguments according to the given format, much like the C printf function
ptx
Produces a permuted index from the contents of the given files, with each keyword in its context
pwd
Reports the name of the current working directory
readlink
Reports the value of the given symbolic link
realpath
Prints the resolved path
rm
Removes files or directories
rmdir
Removes directories if they are empty
runcon
Runs a command with specified security context
seq
Prints a sequence of numbers within a given range and with a given increment
sha1sum
Prints or checks 160-bit Secure Hash Algorithm 1 (SHA1) checksums
sha224sum
Prints or checks 224-bit Secure Hash Algorithm checksums
sha256sum
Prints or checks 256-bit Secure Hash Algorithm checksums
sha384sum
Prints or checks 384-bit Secure Hash Algorithm checksums
sha512sum
Prints or checks 512-bit Secure Hash Algorithm checksums
shred
Overwrites the given files repeatedly with complex patterns, making it difficult to recover the data
shuf
Shuffles lines of text
sleep
Pauses for the given amount of time
sort
Sorts the lines from the given files
split
Splits the given file into pieces, by size or by number of lines
stat
Displays file or filesystem status
stdbuf
Runs commands with altered buffering operations for its standard streams
stty
Sets or reports terminal line settings
sum
Prints checksum and block counts for each given file
sync
Flushes file system buffers; it forces changed blocks to disk and updates the super block
tac
Concatenates the given files in reverse
tail
Prints the last ten lines (or the given number of lines) of each given file
tee
Reads from standard input while writing both to standard output and to the given files
test
Compares values and checks file types
timeout
Runs a command with a time limit
touch
Changes file timestamps, setting the access and modification times of the given files to the current time; files that do not exist are created with zero length
tr
Translates, squeezes, and deletes the given characters from standard input
true
Does nothing, successfully; it always exits with a status code indicating success
truncate
Shrinks or expands a file to the specified size
tsort
Performs a topological sort; it writes a completely ordered list according to the partial ordering in a given file
tty
Reports the file name of the terminal connected to standard input
uname
Reports system information
unexpand
Converts spaces to tabs
uniq
Discards all but one of successive identical lines
unlink
Removes the given file
users
Reports the names of the users currently logged on
vdir
Is the same as ls -l
wc
Reports the number of lines, words, and bytes for each given file, as well as a total line when more than one file is given
who
Reports who is logged on
whoami
Reports the user name associated with the current effective user ID
yes
Repeatedly outputs “y” or a given string until killed
libstdbuf.so
Library used by stdbuf
6.27. Iana-Etc-2.30
The Iana-Etc package provides data for network services and protocols.

Approximate build time:
less than 0.1 SBU
Required disk space:
2.2 MB
6.27.1. Installation of Iana-Etc

The following command converts the raw data provided by IANA into the correct formats for the /etc/protocols and /etc/services data files:

make
This package does not come with a test suite.

Install the package:

make install
6.27.2. Contents of Iana-Etc

Installed files:
/etc/protocols and /etc/services
Short Descriptions

/etc/protocols
Describes the various DARPA Internet protocols that are available from the TCP/IP subsystem
/etc/services
Provides a mapping between friendly textual names for internet services, and their underlying assigned port numbers and protocol types
6.28. M4-1.4.17
The M4 package contains a macro processor.

Approximate build time:
0.4 SBU
Required disk space:
30 MB
6.28.1. Installation of M4

Prepare M4 for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.28.2. Contents of M4

Installed program:
m4
Short Descriptions

m4
copies the given files while expanding the macros that they contain. These macros are either built-in or user-defined and can take any number of arguments. Besides performing macro expansion, m4 has built-in functions for including named files, running Unix commands, performing integer arithmetic, manipulating text, recursion, etc. The m4 program can be used either as a front-end to a compiler or as a macro processor in its own right.
6.29. Flex-2.5.38
The Flex package contains a utility for generating programs that recognize patterns in text.

Approximate build time:
0.4 SBU
Required disk space:
39 MB
6.29.1. Installation of Flex

First, skip running three regression tests that require bison.

sed -i -e '/test-bison/d' tests/Makefile.in
Prepare Flex for compilation:

./configure --prefix=/usr --docdir=/usr/share/doc/flex-2.5.38
Compile the package:

make
To test the results (about 0.5 SBU), issue:

make check
Install the package:

make install
A few programs do not know about flex yet and try to run its predecessor, lex. To support those programs, create a wrapper script named lex that calls flex in lex emulation mode:

cat > /usr/bin/lex << "EOF"
#!/bin/sh
# Begin /usr/bin/lex

exec /usr/bin/flex -l "$@"

# End /usr/bin/lex
EOF
chmod -v 755 /usr/bin/lex
6.29.2. Contents of Flex

Installed programs:
flex, flex++ (link to flex), and lex
Installed libraries:
libfl.{a,so} and libfl_pic.{a,so}
Installed directories:
/usr/share/doc/flex-2.5.38
Short Descriptions

flex
A tool for generating programs that recognize patterns in text; it allows for the versatility to specify the rules for pattern-finding, eradicating the need to develop a specialized program
flex++
An extension of flex, is used for generating C++ code and classes. It is a symbolic link to flex
lex
A script that runs flex in lex emulation mode
libfl
The flex library
6.30. Bison-3.0.2
The Bison package contains a parser generator.

Approximate build time:
0.3 SBU
Required disk space:
31 MB
6.30.1. Installation of Bison

Prepare Bison for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results (about 0.5 SBU), issue:

make check
Install the package:

make install
6.30.2. Contents of Bison

Installed programs:
bison and yacc
Installed library:
liby.a
Installed directory:
/usr/share/bison
Short Descriptions

bison
Generates, from a series of rules, a program for analyzing the structure of text files; Bison is a replacement for Yacc (Yet Another Compiler Compiler)
yacc
A wrapper for bison, meant for programs that still call yacc instead of bison; it calls bison with the -y option
liby.a
The Yacc library containing implementations of Yacc-compatible yyerror and main functions; this library is normally not very useful, but POSIX requires it
6.31. Grep-2.16
The Grep package contains programs for searching through files.

Approximate build time:
0.4 SBU
Required disk space:
30 MB
6.31.1. Installation of Grep

Prepare Grep for compilation:

./configure --prefix=/usr --bindir=/bin
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.31.2. Contents of Grep

Installed programs:
egrep, fgrep, and grep
Short Descriptions

egrep
Prints lines matching an extended regular expression
fgrep
Prints lines matching a list of fixed strings
grep
Prints lines matching a basic regular expression
6.32. Readline-6.2
The Readline package is a set of libraries that offers command-line editing and history capabilities.

Approximate build time:
0.1 SBU
Required disk space:
17.2 MB
6.32.1. Installation of Readline

Reinstalling Readline will cause the old libraries to be moved to <libraryname>.old. While this is normally not a problem, in some cases it can trigger a linking bug in ldconfig. This can be avoided by issuing the following two seds:

sed -i '/MV.*old/d' Makefile.in
sed -i '/{OLDSUFF}/c:' support/shlib-install
Apply a patch to fix a known bug that has been fixed upstream:

patch -Np1 -i ../readline-6.2-fixes-2.patch
Prepare Readline for compilation:

./configure --prefix=/usr
Compile the package:

make SHLIB_LIBS=-lncurses
The meaning of the make option:

SHLIB_LIBS=-lncurses
This option forces Readline to link against the libncurses (really, libncursesw) library.
This package does not come with a test suite.

Install the package:

make install
Now move the dynamic libraries to a more appropriate location and fix up some symbolic links:

mv -v /usr/lib/lib{readline,history}.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libreadline.so) /usr/lib/libreadline.so
ln -sfv ../../lib/$(readlink /usr/lib/libhistory.so ) /usr/lib/libhistory.so
If desired, install the documentation:

mkdir   -v /usr/share/doc/readline-6.2
install -v -m644 doc/*.{ps,pdf,html,dvi} /usr/share/doc/readline-6.2
6.32.2. Contents of Readline

Installed libraries:
libhistory.{a,so}, and libreadline.{a,so}
Installed directories:
/usr/include/readline, /usr/share/readline, /usr/share/doc/readline-6.2
Short Descriptions

libhistory
Provides a consistent user interface for recalling lines of history
libreadline
Aids in the consistency of user interface across discrete programs that need to provide a command line interface
6.33. Bash-4.2
The Bash package contains the Bourne-Again SHell.

Approximate build time:
1.7 SBU
Required disk space:
45 MB
6.33.1. Installation of Bash

First, apply the following patch to fix various bugs that have been addressed upstream:

patch -Np1 -i ../bash-4.2-fixes-12.patch
Prepare Bash for compilation:

./configure --prefix=/usr                     \
            --bindir=/bin                     \
            --htmldir=/usr/share/doc/bash-4.2 \
            --without-bash-malloc             \
            --with-installed-readline
The meaning of the configure options:

--htmldir
This option designates the directory into which HTML formatted documentation will be installed.
--with-installed-readline
This option tells Bash to use the readline library that is already installed on the system rather than using its own readline version.
Compile the package:

make
Skip down to “Install the package” if not running the test suite.

To prepare the tests, ensure that the nobody user can write to the sources tree:

chown -Rv nobody .
Now, run the tests as the nobody user:

su nobody -s /bin/bash -c "PATH=$PATH make tests"
Install the package:

make install
Run the newly compiled bash program (replacing the one that is currently being executed):

exec /bin/bash --login +h
Note

The parameters used make the bash process an interactive login shell and continue to disable hashing so that new programs are found as they become available.

6.33.2. Contents of Bash

Installed programs:
bash, bashbug, and sh (link to bash)
Installed directory:
/usr/share/doc/bash-4.2
Short Descriptions

bash
A widely-used command interpreter; it performs many types of expansions and substitutions on a given command line before executing it, thus making this interpreter a powerful tool
bashbug
A shell script to help the user compose and mail standard formatted bug reports concerning bash
sh
A symlink to the bash program; when invoked as sh, bash tries to mimic the startup behavior of historical versions of sh as closely as possible, while conforming to the POSIX standard as well
6.34. Bc-1.06.95
The Bc package contains an arbitrary precision numeric processing language.

Approximate build time:
0.1 SBU
Required disk space:
3 MB
6.34.1. Installation of Bc

Prepare Bc for compilation:

./configure --prefix=/usr           \
            --with-readline         \
            --mandir=/usr/share/man \
            --infodir=/usr/share/info
The meaning of the configure options:

--with-readline
This option tells Bc to use the readline library that is already installed on the system rather than using its own readline version.
Compile the package:

make
To test bc, run the commands below. There is quite a bit of output, so you may want to redirect it to a file. There are a very small percentage of tests (10 of 12,144) that will indicate a roundoff error at the last digit.

echo "quit" | ./bc/bc -l Test/checklib.b
Install the package:

make install
6.34.2. Contents of Bc

Installed programs:
bc and dc
Short Descriptions

bc
is a command line calculator
dc
is a reverse-polish command line calculator
6.35. Libtool-2.4.2
The Libtool package contains the GNU generic library support script. It wraps the complexity of using shared libraries in a consistent, portable interface.

Approximate build time:
3.0 SBU
Required disk space:
37 MB
6.35.1. Installation of Libtool

Prepare Libtool for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results (about 3.0 SBU), issue:

make check
Install the package:

make install
6.35.2. Contents of Libtool

Installed programs:
libtool and libtoolize
Installed libraries:
libltdl.{a,so}
Installed directories:
/usr/include/libltdl, /usr/share/libtool
Short Descriptions

libtool
Provides generalized library-building support services
libtoolize
Provides a standard way to add libtool support to a package
libltdl
Hides the various difficulties of dlopening libraries
6.36. GDBM-1.11
The GDBM package contains the GNU Database Manager. This is a disk file format database which stores key/data-pairs in single files. The actual data of any record being stored is indexed by a unique key, which can be retrieved in less time than if it was stored in a text file.

Approximate build time:
0.1 SBU
Required disk space:
8.5 MB
6.36.1. Installation of GDBM

Prepare GDBM for compilation:

./configure --prefix=/usr --enable-libgdbm-compat
The meaning of the configure option:

--enable-libgdbm-compat
This switch enables the libgdbm compatibility library to be built, as some packages outside of LFS may require the older DBM routines it provides.
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.36.2. Contents of GDBM

Installed program:
testgdbm
Installed libraries:
libgdbm.{a,so} and libgdbm_compat.{a,so}
Short Descriptions

testgdbm
Tests and modifies a GDBM database
libgdbm
Contains functions to manipulate a hashed database
6.37. Inetutils-1.9.2
The Inetutils package contains programs for basic networking.

Approximate build time:
0.4 SBU
Required disk space:
27 MB
6.37.1. Installation of Inetutils

Create a definition to allow the ifconfig program to build properly.

echo '#define PATH_PROCNET_DEV "/proc/net/dev"' >> ifconfig/system/linux.h 
Prepare Inetutils for compilation:

./configure --prefix=/usr  \
    --localstatedir=/var   \
    --disable-logger       \
    --disable-syslogd      \
    --disable-whois        \
    --disable-servers
The meaning of the configure options:

--disable-logger
This option prevents Inetutils from installing the logger program, which is used by scripts to pass messages to the System Log Daemon. Do not install it because Util-linux installed a version earlier.
--disable-syslogd
This option prevents Inetutils from installing the System Log Daemon, which is installed with the Sysklogd package.
--disable-whois
This option disables the building of the Inetutils whois client, which is out of date. Instructions for a better whois client are in the BLFS book.
--disable-servers
This disables the installation of the various network servers included as part of the Inetutils package. These servers are deemed not appropriate in a basic LFS system. Some are insecure by nature and are only considered safe on trusted networks. Note that better replacements are available for many of these servers.
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
Move some programs so they are available if /usr is not accessible:

mv -v /usr/bin/{hostname,ping,ping6,traceroute} /bin
mv -v /usr/bin/ifconfig /sbin
6.37.2. Contents of Inetutils

Installed programs:
ftp, ifconfig, hostname, ping, ping6, rcp, rexec, rlogin, rsh, talk, telnet, tftp, and traceroute
Short Descriptions

ftp
Is the file transfer protocol program
ifconfig
Manages network interfaces
hostname
Reports or sets the name of the host
ping
Sends echo-request packets and reports how long the replies take
ping6
A version of ping for IPv6 networks
rcp
Performs remote file copy
rexec
Executes commands on a remote host
rlogin
Performs remote login
rsh
Runs a remote shell
talk
Is used to chat with another user
telnet
An interface to the TELNET protocol
tftp
A trivial file transfer program
traceroute
Traces the route your packets take from the host you are working on to another host on a network, showing all the intermediate hops (gateways) along the way
6.38. Perl-5.18.2
The Perl package contains the Practical Extraction and Report Language.

Approximate build time:
6.7 SBU
Required disk space:
246 MB
6.38.1. Installation of Perl

First create a basic /etc/hosts file to be referenced in one of Perl's configuration files as well as the optional test suite:

echo "127.0.0.1 localhost $(hostname)" > /etc/hosts
This version of Perl now builds the Compress::Raw::Zlib module. By default Perl will use an internal copy of the Zlib source for the build. Issue the following command so that Perl will use the Zlib library installed on the system:

sed -i -e "s|BUILD_ZLIB\s*= True|BUILD_ZLIB = False|"           \
       -e "s|INCLUDE\s*= ./zlib-src|INCLUDE    = /usr/include|" \
       -e "s|LIB\s*= ./zlib-src|LIB        = /usr/lib|"         \
    cpan/Compress-Raw-Zlib/config.in
To have full control over the way Perl is set up, you can remove the “-des” options from the following command and hand-pick the way this package is built. Alternatively, use the command exactly as below to use the defaults that Perl auto-detects:

sh Configure -des -Dprefix=/usr                 \
                  -Dvendorprefix=/usr           \
                  -Dman1dir=/usr/share/man/man1 \
                  -Dman3dir=/usr/share/man/man3 \
                  -Dpager="/usr/bin/less -isR"  \
                  -Duseshrplib
The meaning of the configure options:

-Dvendorprefix=/usr
This ensures perl knows how to tell packages where they should install their perl modules.
-Dpager="/usr/bin/less -isR"
This corrects an error in the way that perldoc invokes the less program.
-Dman1dir=/usr/share/man/man1 -Dman3dir=/usr/share/man/man3
Since Groff is not installed yet, Configure thinks that we do not want man pages for Perl. Issuing these parameters overrides this decision.
-Duseshrplib
Build a shared libperl needed by some perl modules.
Compile the package:

make
To test the results (approximately 2.5 SBU), issue:

make -k test
Install the package:

make install
6.38.2. Contents of Perl

Installed programs:
a2p, c2ph, config_data, corelist, cpan, cpan2dist, cpanp, cpanp-run-perl, enc2xs, find2perl, h2ph, h2xs, instmodsh, json_pp, libnetcfg, perl, perl5.18.2 (link to perl), perlbug, perldoc, perlivp, perlthanks (link to perlbug), piconv, pl2pm, pod2html, pod2latex, pod2man, pod2text, pod2usage, podchecker, podselect, prove, psed (link to s2p), pstruct (link to c2ph), ptar, ptardiff, ptargrep, s2p, shasum, splain, xsubpp, and zipdetails
Installed libraries:
Several hundred which cannot all be listed here
Installed directory:
/usr/lib/perl5
Short Descriptions

a2p
Translates awk to Perl
c2ph
Dumps C structures as generated from cc -g -S
config_data
Queries or changes configuration of Perl modules
corelist
A commandline frontend to Module::CoreList
cpan
Interact with the Comprehensive Perl Archive Network (CPAN) from the command line
cpan2dist
The CPANPLUS distribution creator
cpanp
The CPANPLUS launcher
cpanp-run-perl
Perl script that is used to enable flushing of the output buffer after each write in spawned processes
enc2xs
Builds a Perl extension for the Encode module from either Unicode Character Mappings or Tcl Encoding Files
find2perl
Translates find commands to Perl
h2ph
Converts .h C header files to .ph Perl header files
h2xs
Converts .h C header files to Perl extensions
instmodsh
Shell script for examining installed Perl modules, and can even create a tarball from an installed module
json_pp
Converts data between certain input and output formats
libnetcfg
Can be used to configure the libnet Perl module
perl
Combines some of the best features of C, sed, awk and sh into a single swiss-army language
perl5.18.2
A hard link to perl
perlbug
Used to generate bug reports about Perl, or the modules that come with it, and mail them
perldoc
Displays a piece of documentation in pod format that is embedded in the Perl installation tree or in a Perl script
perlivp
The Perl Installation Verification Procedure; it can be used to verify that Perl and its libraries have been installed correctly
perlthanks
Used to generate thank you messages to mail to the Perl developers
piconv
A Perl version of the character encoding converter iconv
pl2pm
A rough tool for converting Perl4 .pl files to Perl5 .pm modules
pod2html
Converts files from pod format to HTML format
pod2latex
Converts files from pod format to LaTeX format
pod2man
Converts pod data to formatted *roff input
pod2text
Converts pod data to formatted ASCII text
pod2usage
Prints usage messages from embedded pod docs in files
podchecker
Checks the syntax of pod format documentation files
podselect
Displays selected sections of pod documentation
prove
Command line tool for running tests against the Test::Harness module.
psed
A Perl version of the stream editor sed
pstruct
Dumps C structures as generated from cc -g -S stabs
ptar
A tar-like program written in Perl
ptardiff
A Perl program that compares an extracted archive with an unextracted one
ptargrep
A Perl program that applies pattern matching to the contents of files in a tar archive
s2p
Translates sed scripts to Perl
shasum
Prints or checks SHA checksums
splain
Is used to force verbose warning diagnostics in Perl
xsubpp
Converts Perl XS code into C code
zipdetails
Displays details about the internal structure of a Zip file
6.39. Autoconf-2.69
The Autoconf package contains programs for producing shell scripts that can automatically configure source code.

Approximate build time:
4.5 SBU
Required disk space:
17.1 MB
6.39.1. Installation of Autoconf

Prepare Autoconf for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
This takes a long time, about 4.7 SBUs. In addition, 6 tests are skipped that use Automake. For full test coverage, Autoconf can be re-tested after Automake has been installed.

Install the package:

make install
6.39.2. Contents of Autoconf

Installed programs:
autoconf, autoheader, autom4te, autoreconf, autoscan, autoupdate, and ifnames
Installed directory:
/usr/share/autoconf
Short Descriptions

autoconf
Produces shell scripts that automatically configure software source code packages to adapt to many kinds of Unix-like systems. The configuration scripts it produces are independent—running them does not require the autoconf program.
autoheader
A tool for creating template files of C #define statements for configure to use
autom4te
A wrapper for the M4 macro processor
autoreconf
Automatically runs autoconf, autoheader, aclocal, automake, gettextize, and libtoolize in the correct order to save time when changes are made to autoconf and automake template files
autoscan
Helps to create a configure.in file for a software package; it examines the source files in a directory tree, searching them for common portability issues, and creates a configure.scan file that serves as as a preliminary configure.in file for the package
autoupdate
Modifies a configure.in file that still calls autoconf macros by their old names to use the current macro names
ifnames
Helps when writing configure.in files for a software package; it prints the identifiers that the package uses in C preprocessor conditionals. If a package has already been set up to have some portability, this program can help determine what configure needs to check for. It can also fill in gaps in a configure.in file generated by autoscan
6.40. Automake-1.14.1
The Automake package contains programs for generating Makefiles for use with Autoconf.

Approximate build time:
less than 0.1 SBU (about 12 SBU with tests)
Required disk space:
100 MB
6.40.1. Installation of Automake

Prepare Automake for compilation:

./configure --prefix=/usr --docdir=/usr/share/doc/automake-1.14.1
Compile the package:

make
There are a couple of tests that incorrectly link to the wrong version of the flex library, so we temporarily work around the problem. Also, using the -j4 make option speeds up the tests, even on systems with only one processor due to internal delays in individual tests. To test the results, issue:

sed -i "s:./configure:LEXLIB=/usr/lib/libfl.a &:" t/lex-{clean,depend}-cxx.sh
make -j4 check
Install the package:

make install
6.40.2. Contents of Automake

Installed programs:
acinstall, aclocal, aclocal-1.14, automake, automake-1.14, compile, config.guess, config.sub, depcomp, install-sh, mdate-sh, missing, mkinstalldirs, py-compile, and ylwrap
Installed directories:
/usr/share/aclocal-1.14, /usr/share/automake-1.14, /usr/share/doc/automake-1.14.1
Short Descriptions

acinstall
A script that installs aclocal-style M4 files
aclocal
Generates aclocal.m4 files based on the contents of configure.in files
aclocal-1.14
A hard link to aclocal
automake
A tool for automatically generating Makefile.in files from Makefile.am files. To create all the Makefile.in files for a package, run this program in the top-level directory. By scanning the configure.in file, it automatically finds each appropriate Makefile.am file and generates the corresponding Makefile.in file
automake-1.14
A hard link to automake
compile
A wrapper for compilers
config.guess
A script that attempts to guess the canonical triplet for the given build, host, or target architecture
config.sub
A configuration validation subroutine script
depcomp
A script for compiling a program so that dependency information is generated in addition to the desired output
install-sh
A script that installs a program, script, or data file
mdate-sh
A script that prints the modification time of a file or directory
missing
A script acting as a common stub for missing GNU programs during an installation
mkinstalldirs
A script that creates a directory tree
py-compile
Compiles a Python program
ylwrap
A wrapper for lex and yacc
6.41. Diffutils-3.3
The Diffutils package contains programs that show the differences between files or directories.

Approximate build time:
0.5 SBU
Required disk space:
25 MB
6.41.1. Installation of Diffutils

First fix a file so locale files are installed:

sed -i 's:= @mkdir_p@:= /bin/mkdir -p:' po/Makefile.in.in
Prepare Diffutils for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.41.2. Contents of Diffutils

Installed programs:
cmp, diff, diff3, and sdiff
Short Descriptions

cmp
Compares two files and reports whether or in which bytes they differ
diff
Compares two files or directories and reports which lines in the files differ
diff3
Compares three files line by line
sdiff
Merges two files and interactively outputs the results
6.42. Gawk-4.1.0
The Gawk package contains programs for manipulating text files.

Approximate build time:
0.2 SBU
Required disk space:
30 MB
6.42.1. Installation of Gawk

Prepare Gawk for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
If desired, install the documentation:

mkdir -v /usr/share/doc/gawk-4.1.0
cp    -v doc/{awkforai.txt,*.{eps,pdf,jpg}} /usr/share/doc/gawk-4.1.0
6.42.2. Contents of Gawk

Installed programs:
awk (link to gawk), gawk, gawk-4.1.0, and igawk
Installed libraries:
filefuncs.so, fnmatch.so, fork.so, inplace.so, ordchr.so, readdir.so, readfile.so, revoutput.so, revtwoway.so, rwarray.so, testext.so, and time.so
Installed directories:
/usr/lib/gawk, /usr/libexec/awk, /usr/share/awk, /usr/share/doc/gawk-4.1.0
Short Descriptions

awk
A link to gawk
gawk
A program for manipulating text files; it is the GNU implementation of awk
gawk-4.1.0
A hard link to gawk
igawk
Gives gawk the ability to include files
6.43. Findutils-4.4.2
The Findutils package contains programs to find files. These programs are provided to recursively search through a directory tree and to create, maintain, and search a database (often faster than the recursive find, but unreliable if the database has not been recently updated).

Approximate build time:
0.4 SBU
Required disk space:
29 MB
6.43.1. Installation of Findutils

Prepare Findutils for compilation:

./configure --prefix=/usr --localstatedir=/var/lib/locate
The meaning of the configure options:

--localstatedir
This option changes the location of the locate database to be in /var/lib/locate, which is FHS-compliant.
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
Some of the scripts in the LFS-Bootscripts package depend on find. As /usr may not be available during the early stages of booting, this program needs to be on the root partition. The updatedb script also needs to be modified to correct an explicit path:

mv -v /usr/bin/find /bin
sed -i 's/find:=${BINDIR}/find:=\/bin/' /usr/bin/updatedb
6.43.2. Contents of Findutils

Installed programs:
bigram, code, find, frcode, locate, oldfind, updatedb, and xargs
Short Descriptions

bigram
Was formerly used to produce locate databases
code
Was formerly used to produce locate databases; it is the ancestor of frcode.
find
Searches given directory trees for files matching the specified criteria
frcode
Is called by updatedb to compress the list of file names; it uses front-compression, reducing the database size by a factor of four to five.
locate
Searches through a database of file names and reports the names that contain a given string or match a given pattern
oldfind
Older version of find, using a different algorithm
updatedb
Updates the locate database; it scans the entire file system (including other file systems that are currently mounted, unless told not to) and puts every file name it finds into the database
xargs
Can be used to apply a given command to a list of files
6.44. Gettext-0.18.3.2
The Gettext package contains utilities for internationalization and localization. These allow programs to be compiled with NLS (Native Language Support), enabling them to output messages in the user's native language.

Approximate build time:
2.3 SBU
Required disk space:
199 MB
6.44.1. Installation of Gettext

Prepare Gettext for compilation:

./configure --prefix=/usr --docdir=/usr/share/doc/gettext-0.18.3.2
Compile the package:

make
To test the results (this takes a long time, around 3 SBUs), issue:

make check
Install the package:

make install
6.44.2. Contents of Gettext

Installed programs:
autopoint, config.charset, config.rpath, envsubst, gettext, gettext.sh, gettextize, hostname, msgattrib, msgcat, msgcmp, msgcomm, msgconv, msgen, msgexec, msgfilter, msgfmt, msggrep, msginit, msgmerge, msgunfmt, msguniq, ngettext, recode-sr-latin, and xgettext
Installed libraries:
libasprintf.{a,so}, libgettextlib.so, libgettextpo.{a,so}, libgettextsrc.so, and preloadable_libintl.so
Installed directories:
/usr/lib/gettext, /usr/share/doc/gettext-0.18.3.2, /usr/share/gettext
Short Descriptions

autopoint
Copies standard Gettext infrastructure files into a source package
config.charset
Outputs a system-dependent table of character encoding aliases
config.rpath
Outputs a system-dependent set of variables, describing how to set the runtime search path of shared libraries in an executable
envsubst
Substitutes environment variables in shell format strings
gettext
Translates a natural language message into the user's language by looking up the translation in a message catalog
gettext.sh
Primarily serves as a shell function library for gettext
gettextize
Copies all standard Gettext files into the given top-level directory of a package to begin internationalizing it
hostname
Displays a network hostname in various forms
msgattrib
Filters the messages of a translation catalog according to their attributes and manipulates the attributes
msgcat
Concatenates and merges the given .po files
msgcmp
Compares two .po files to check that both contain the same set of msgid strings
msgcomm
Finds the messages that are common to to the given .po files
msgconv
Converts a translation catalog to a different character encoding
msgen
Creates an English translation catalog
msgexec
Applies a command to all translations of a translation catalog
msgfilter
Applies a filter to all translations of a translation catalog
msgfmt
Generates a binary message catalog from a translation catalog
msggrep
Extracts all messages of a translation catalog that match a given pattern or belong to some given source files
msginit
Creates a new .po file, initializing the meta information with values from the user's environment
msgmerge
Combines two raw translations into a single file
msgunfmt
Decompiles a binary message catalog into raw translation text
msguniq
Unifies duplicate translations in a translation catalog
ngettext
Displays native language translations of a textual message whose grammatical form depends on a number
recode-sr-latin
Recodes Serbian text from Cyrillic to Latin script
xgettext
Extracts the translatable message lines from the given source files to make the first translation template
libasprintf
defines the autosprintf class, which makes C formatted output routines usable in C++ programs, for use with the <string> strings and the <iostream> streams
libgettextlib
a private library containing common routines used by the various Gettext programs; these are not intended for general use
libgettextpo
Used to write specialized programs that process .po files; this library is used when the standard applications shipped with Gettext (such as msgcomm, msgcmp, msgattrib, and msgen) will not suffice
libgettextsrc
A private library containing common routines used by the various Gettext programs; these are not intended for general use
preloadable_libintl
A library, intended to be used by LD_PRELOAD that assists libintl in logging untranslated messages.
6.45. Groff-1.22.2
The Groff package contains programs for processing and formatting text.

Approximate build time:
0.5 SBU
Required disk space:
83 MB
6.45.1. Installation of Groff

Groff expects the environment variable PAGE to contain the default paper size. For users in the United States, PAGE=letter is appropriate. Elsewhere, PAGE=A4 may be more suitable. While the default paper size is configured during compilation, it can be overridden later by echoing either “A4” or “letter” to the /etc/papersize file.

Prepare Groff for compilation:

PAGE=<paper_size> ./configure --prefix=/usr
Compile the package:

make
This package does not come with a test suite.

Install the package:

make install
Some documentation programs, such as xman, will not work properly without the following symlinks:

ln -sv eqn /usr/bin/geqn
ln -sv tbl /usr/bin/gtbl
6.45.2. Contents of Groff

Installed programs:
addftinfo, afmtodit, chem, eqn, eqn2graph, gdiffmk, geqn (link to eqn), grap2graph, grn, grodvi, groff, groffer, grog, grolbp, grolj4, grops, grotty, gtbl (link to tbl), hpftodit, indxbib, lkbib, lookbib, mmroff, neqn, nroff, pdfroff, pfbtops, pic, pic2graph, post-grohtml, preconv, pre-grohtml, refer, roff2dvi, roff2html, roff2pdf, roff2ps, roff2text, roff2x, soelim, tbl, tfmtodit, and troff
Installed directories:
/usr/lib/groff, /usr/share/doc/groff-1.22.2, /usr/share/groff
Short Descriptions

addftinfo
Reads a troff font file and adds some additional font-metric information that is used by the groff system
afmtodit
Creates a font file for use with groff and grops
chem
Groff preprocessor for producing chemical structure diagrams
eqn
Compiles descriptions of equations embedded within troff input files into commands that are understood by troff
eqn2graph
Converts a troff EQN (equation) into a cropped image
gdiffmk
Marks differences between groff/nroff/troff files
geqn
A link to eqn
grap2graph
Converts a grap diagram into a cropped bitmap image
grn
A groff preprocessor for gremlin files
grodvi
A driver for groff that produces TeX dvi format
groff
A front-end to the groff document formatting system; normally, it runs the troff program and a post-processor appropriate for the selected device
groffer
Displays groff files and man pages on X and tty terminals
grog
Reads files and guesses which of the groff options -e, -man, -me, -mm, -ms, -p, -s, and -t are required for printing files, and reports the groff command including those options
grolbp
Is a groff driver for Canon CAPSL printers (LBP-4 and LBP-8 series laser printers)
grolj4
Is a driver for groff that produces output in PCL5 format suitable for an HP LaserJet 4 printer
grops
Translates the output of GNU troff to PostScript
grotty
Translates the output of GNU troff into a form suitable for typewriter-like devices
gtbl
A link to tbl
hpftodit
Creates a font file for use with groff -Tlj4 from an HP-tagged font metric file
indxbib
Creates an inverted index for the bibliographic databases with a specified file for use with refer, lookbib, and lkbib
lkbib
Searches bibliographic databases for references that contain specified keys and reports any references found
lookbib
Prints a prompt on the standard error (unless the standard input is not a terminal), reads a line containing a set of keywords from the standard input, searches the bibliographic databases in a specified file for references containing those keywords, prints any references found on the standard output, and repeats this process until the end of input
mmroff
A simple preprocessor for groff
neqn
Formats equations for American Standard Code for Information Interchange (ASCII) output
nroff
A script that emulates the nroff command using groff
pdfroff
Creates pdf documents using groff
pfbtops
Translates a PostScript font in .pfb format to ASCII
pic
Compiles descriptions of pictures embedded within troff or TeX input files into commands understood by TeX or troff
pic2graph
Converts a PIC diagram into a cropped image
post-grohtml
Translates the output of GNU troff to HTML
preconv
Converts encoding of input files to something GNU troff understands
pre-grohtml
Translates the output of GNU troff to HTML
refer
Copies the contents of a file to the standard output, except that lines between .[ and .] are interpreted as citations, and lines between .R1 and .R2 are interpreted as commands for how citations are to be processed
roff2dvi
Transforms roff files into DVI format
roff2html
Transforms roff files into HTML format
roff2pdf
Transforms roff files into PDFs
roff2ps
Transforms roff files into ps files
roff2text
Transforms roff files into text files
roff2x
Transforms roff files into other formats
soelim
Reads files and replaces lines of the form .so file by the contents of the mentioned file
tbl
Compiles descriptions of tables embedded within troff input files into commands that are understood by troff
tfmtodit
Creates a font file for use with groff -Tdvi
troff
Is highly compatible with Unix troff; it should usually be invoked using the groff command, which will also run preprocessors and post-processors in the appropriate order and with the appropriate options
6.46. Xz-5.0.5
The Xz package contains programs for compressing and decompressing files. It provides capabilities for the lzma and the newer xz compression formats. Compressing text files with xz yields a better compression percentage than with the traditional gzip or bzip2 commands.

Approximate build time:
0.3 SBU
Required disk space:
18 MB
6.46.1. Installation of Xz

Prepare Xz for compilation with:

./configure --prefix=/usr --docdir=/usr/share/doc/xz-5.0.5
Compile the package:

make
To test the results, issue:

make check
Install the package and make sure that all essential files are in the correct directory:

make install
mv -v   /usr/bin/{lzma,unlzma,lzcat,xz,unxz,xzcat} /bin
mv -v /usr/lib/liblzma.so.* /lib
ln -svf ../../lib/$(readlink /usr/lib/liblzma.so) /usr/lib/liblzma.so
6.46.2. Contents of Xz

Installed programs:
lzcat (link to xz), lzcmp (link to xzdiff), lzdiff (link to xzdiff), lzegrep (link to xzgrep), lzfgrep (link to xzgrep), lzgrep (link to xzgrep), lzless (link to xzless), lzma (link to xz), lzmadec, lzmainfo, lzmore (link to xzmore), unlzma (link to xz), unxz, (link to xz), xz, xzcat (link to xz), xzcmp (link to xzdiff), xzdec, xzdiff, xzegrep (link to xzgrep), xzfgrep (link to xzgrep), xzgrep, xzless, xzmore
Installed libraries:
liblzma.{a,so}
Installed directories:
/usr/include/lzma and /usr/share/doc/xz-5.0.5
Short Descriptions

lzcat
Decompresses to standard output
lzcmp
Runs cmp on LZMA compressed files
lzdiff
Runs diff on LZMA compressed files
lzegrep
Runs egrep on LZMA compressed files files
lzfgrep
Runs fgrep on LZMA compressed files
lzgrep
Runs grep on LZMA compressed files
lzless
Runs less on LZMA compressed files
lzma
Compresses or decompresses files using the LZMA format
lzmadec
A small and fast decoder for LZMA compressed files
lzmainfo
Shows information stored in the LZMA compressed file header
lzmore
Runs more on LZMA compressed files
unlzma
Decompresses files using the LZMA format
unxz
Decompresses files using the XZ format
xz
Compresses or decompresses files using the XZ format
xzcat
Decompresses to standard output
xzcmp
Runs cmp on XZ compressed files
xzdec
A small and fast decoder for XZ compressed files
xzdiff
Runs diff on XZ compressed files
xzegrep
Runs egrep on XZ compressed files files
xzfgrep
Runs fgrep on XZ compressed files
xzgrep
Runs grep on XZ compressed files
xzless
Runs less on XZ compressed files
xzmore
Runs more on XZ compressed files
liblzma*
The library implementing lossless, block-sorting data compression, using the Lempel-Ziv-Markov chain algorithm
6.47. GRUB-2.00
The GRUB package contains the GRand Unified Bootloader.

Approximate build time:
0.7 SBU
Required disk space:
112 MB
6.47.1. Installation of GRUB

Fix an incompatibility between this package and Glibc-2.19:

sed -i -e '/gets is a/d' grub-core/gnulib/stdio.in.h
Prepare GRUB for compilation:

./configure --prefix=/usr          \
            --sbindir=/sbin        \
            --sysconfdir=/etc      \
            --disable-grub-emu-usb \
            --disable-efiemu       \
            --disable-werror
The --disable-werror option allows the build to complete with warnings introduced by more recent flex versions. The other --disable switches minimize what is built by disabling features and testing programs not needed for LFS.

Compile the package:

make
This package does not come with a test suite.

Install the package:

make install
Using GRUB to make your LFS system bootable will be discussed in Section 8.4, “Using GRUB to Set Up the Boot Process”.

6.47.2. Contents of GRUB

Installed programs:
grub-bios-setup, grub-editenv, grub-fstest, grub-install, grub-kbdcomp, grub-menulst2cfg, grub-mkconfig, grub-mkimage, grub-mklayout, grub-mknetdir, grub-mkpasswd-pbkdf2, grub-mkrelpath, grub-mkrescue, grub-mkstandalone, grub-ofpathname, grub-probe, grub-reboot, grub-script-check, grub-set-default, grub-sparc64-setup
Installed directories:
/usr/lib/grub, /etc/grub.d, /usr/share/grub, /boot/grub
Short Descriptions

grub-bios-setup
Is a helper program for grub-install
grub-editenv
A tool to edit the environment block
grub-fstest
Tool to debug the filesystem driver
grub-install
Install GRUB on your drive
grub-kbdcomp
Script that converts an xkb layout into one recognized by GRUB
grub-menulst2cfg
Converts a GRUB Legacy menu.lst into a grub.cfg for use with GRUB 2
grub-mkconfig
Generate a grub config file
grub-mkimage
Make a bootable image of GRUB
grub-mklayout
Generates a GRUB keyboard layout file
grub-mknetdir
Prepares a GRUB netboot directory
grub-mkpasswd-pbkdf2
Generates an encrypted PBKDF2 password for use in the boot menu
grub-mkrelpath
Makes a system pathname relative to its root
grub-mkrescue
Make a bootable image of GRUB suitable for a floppy disk or CDROM/DVD
grub-mkstandalone
Generates a standalone image
grub-ofpathname
Is a helper program that prints the path of a GRUB device
grub-probe
Probe device information for a given path or device
grub-reboot
Sets the default boot entry for GRUB for the next boot only
grub-script-check
Checks GRUB configuration script for syntax errors
grub-set-default
Sets the default boot entry for GRUB
grub-sparc64-setup
Is a helper program for grub-setup
6.48. Less-458
The Less package contains a text file viewer.

Approximate build time:
less than 0.1 SBU
Required disk space:
3.6 MB
6.48.1. Installation of Less

Prepare Less for compilation:

./configure --prefix=/usr --sysconfdir=/etc
The meaning of the configure options:

--sysconfdir=/etc
This option tells the programs created by the package to look in /etc for the configuration files.
Compile the package:

make
This package does not come with a test suite.

Install the package:

make install
6.48.2. Contents of Less

Installed programs:
less, lessecho, and lesskey
Short Descriptions

less
A file viewer or pager; it displays the contents of the given file, letting the user scroll, find strings, and jump to marks
lessecho
Needed to expand meta-characters, such as * and ?, in filenames on Unix systems
lesskey
Used to specify the key bindings for less
6.49. Gzip-1.6
The Gzip package contains programs for compressing and decompressing files.

Approximate build time:
0.2 SBU
Required disk space:
19.7 MB
6.49.1. Installation of Gzip

Prepare Gzip for compilation:

./configure --prefix=/usr --bindir=/bin
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
Move some programs that do not need to be on the root filesystem:

mv -v /bin/{gzexe,uncompress,zcmp,zdiff,zegrep} /usr/bin
mv -v /bin/{zfgrep,zforce,zgrep,zless,zmore,znew} /usr/bin
6.49.2. Contents of Gzip

Installed programs:
gunzip, gzexe, gzip, uncompress, zcat, zcmp, zdiff, zegrep, zfgrep, zforce, zgrep, zless, zmore, and znew
Short Descriptions

gunzip
Decompresses gzipped files
gzexe
Creates self-decompressing executable files
gzip
Compresses the given files using Lempel-Ziv (LZ77) coding
uncompress
Decompresses compressed files
zcat
Decompresses the given gzipped files to standard output
zcmp
Runs cmp on gzipped files
zdiff
Runs diff on gzipped files
zegrep
Runs egrep on gzipped files
zfgrep
Runs fgrep on gzipped files
zforce
Forces a .gz extension on all given files that are gzipped files, so that gzip will not compress them again; this can be useful when file names were truncated during a file transfer
zgrep
Runs grep on gzipped files
zless
Runs less on gzipped files
zmore
Runs more on gzipped files
znew
Re-compresses files from compress format to gzip format—.Z to .gz
6.50. IPRoute2-3.12.0
The IPRoute2 package contains programs for basic and advanced IPV4-based networking.

Approximate build time:
0.1 SBU
Required disk space:
7.3 MB
6.50.1. Installation of IPRoute2

The arpd binary included in this package is dependent on Berkeley DB. Because arpd is not a very common requirement on a base Linux system, remove the dependency on Berkeley DB by applying the commands below. If the arpd binary is needed, instructions for compiling Berkeley DB can be found in the BLFS Book at http://www.linuxfromscratch.org/blfs/view/svn/server/databases.html#db.

sed -i '/^TARGETS/s@arpd@@g' misc/Makefile
sed -i /ARPD/d Makefile
sed -i 's/arpd.8//' man/man8/Makefile
Compile the package:

make DESTDIR=
The meaning of the make option:

DESTDIR=
This ensures that the IPRoute2 binaries will install into the correct directory. By default, DESTDIR is set to /usr.
This package comes with a test suite, but due to assumptions it makes, it is not possible to reliably run these tests from within the chroot environment. If you wish to run these tests after booting into your new LFS system, ensure you select /proc/config.gz CONFIG_IKCONFIG_PROC ("General setup" -> "Enable access to .config through /proc/config.gz") support into your kernel then run 'make alltests' from the testsuite/ subdirectory.

Install the package:

make DESTDIR=              \
     MANDIR=/usr/share/man \
     DOCDIR=/usr/share/doc/iproute2-3.12.0 install
6.50.2. Contents of IPRoute2

Installed programs:
bridge, ctstat (link to lnstat), genl, ifcfg, ifstat, ip, lnstat, nstat, routef, routel, rtacct, rtmon, rtpr, rtstat (link to lnstat), ss, and tc
Installed directories:
/etc/iproute2, /lib/tc, /usr/share/doc/iproute2-3.12.0, /usr/lib/tc
Short Descriptions

bridge
Configures network bridges
ctstat
Connection status utility
genl
ifcfg
A shell script wrapper for the ip command. Note that it requires the arping and rdisk programs from the iputils package found at http://www.skbuff.net/iputils/.
ifstat
Shows the interface statistics, including the amount of transmitted and received packets by interface
ip
The main executable. It has several different functions:
ip link <device> allows users to look at the state of devices and to make changes
ip addr allows users to look at addresses and their properties, add new addresses, and delete old ones
ip neighbor allows users to look at neighbor bindings and their properties, add new neighbor entries, and delete old ones
ip rule allows users to look at the routing policies and change them
ip route allows users to look at the routing table and change routing table rules
ip tunnel allows users to look at the IP tunnels and their properties, and change them
ip maddr allows users to look at the multicast addresses and their properties, and change them
ip mroute allows users to set, change, or delete the multicast routing
ip monitor allows users to continuously monitor the state of devices, addresses and routes
lnstat
Provides Linux network statistics. It is a generalized and more feature-complete replacement for the old rtstat program
nstat
Shows network statistics
routef
A component of ip route. This is for flushing the routing tables
routel
A component of ip route. This is for listing the routing tables
rtacct
Displays the contents of /proc/net/rt_acct
rtmon
Route monitoring utility
rtpr
Converts the output of ip -o back into a readable form
rtstat
Route status utility
ss
Similar to the netstat command; shows active connections
tc
Traffic Controlling Executable; this is for Quality Of Service (QOS) and Class Of Service (COS) implementations
tc qdisc allows users to setup the queueing discipline
tc class allows users to setup classes based on the queuing discipline scheduling
tc estimator allows users to estimate the network flow into a network
tc filter allows users to setup the QOS/COS packet filtering
tc policy allows users to setup the QOS/COS policies
6.51. Kbd-2.0.1
The Kbd package contains key-table files, console fonts, and keyboard utilities.

Approximate build time:
0.1 SBU
Required disk space:
20 MB
6.51.1. Installation of Kbd

The behaviour of the Backspace and Delete keys is not consistent across the keymaps in the Kbd package. The following patch fixes this issue for i386 keymaps:

patch -Np1 -i ../kbd-2.0.1-backspace-1.patch
After patching, the Backspace key generates the character with code 127, and the Delete key generates a well-known escape sequence.

Remove the redundant resizecons program (it requires the defunct svgalib to provide the video mode files - for normal use setfont sizes the console appropriately) together with its manpage.

sed -i 's/\(RESIZECONS_PROGS=\)yes/\1no/g' configure
sed -i 's/resizecons.8 //' docs/man/man8/Makefile.in
Prepare Kbd for compilation:

PKG_CONFIG_PATH=/tools/lib/pkgconfig ./configure --prefix=/usr --disable-vlock
The meaning of the configure options:

--disable-vlock
This option prevents the vlock utility from being built, as it requires the PAM library, which isn't available in the chroot environment.
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
Note

For some languages (e.g., Belarusian) the Kbd package doesn't provide a useful keymap where the stock “by” keymap assumes the ISO-8859-5 encoding, and the CP1251 keymap is normally used. Users of such languages have to download working keymaps separately.

If desired, install the documentation:

mkdir -v       /usr/share/doc/kbd-2.0.1
cp -R -v docs/doc/* /usr/share/doc/kbd-2.0.1
6.51.2. Contents of Kbd

Installed programs:
chvt, deallocvt, dumpkeys, fgconsole, getkeycodes, kbdinfo, kbd_mode, kbdrate, loadkeys, loadunimap, mapscrn, openvt, psfaddtable (link to psfxtable), psfgettable (link to psfxtable), psfstriptable (link to psfxtable), psfxtable, setfont, setkeycodes, setleds, setmetamode, showconsolefont, showkey, unicode_start, and unicode_stop
Installed directories:
/usr/share/consolefonts, /usr/share/consoletrans, /usr/share/keymaps, /usr/share/unimaps
Short Descriptions

chvt
Changes the foreground virtual terminal
deallocvt
Deallocates unused virtual terminals
dumpkeys
Dumps the keyboard translation tables
fgconsole
Prints the number of the active virtual terminal
getkeycodes
Prints the kernel scancode-to-keycode mapping table
kbdinfo
Obtains information about the status of a console
kbd_mode
Reports or sets the keyboard mode
kbdrate
Sets the keyboard repeat and delay rates
loadkeys
Loads the keyboard translation tables
loadunimap
Loads the kernel unicode-to-font mapping table
mapscrn
An obsolete program that used to load a user-defined output character mapping table into the console driver; this is now done by setfont
openvt
Starts a program on a new virtual terminal (VT)
psfaddtable
A link to psfxtable
psfgettable
A link to psfxtable
psfstriptable
A link to psfxtable
psfxtable
Handle Unicode character tables for console fonts
setfont
Changes the Enhanced Graphic Adapter (EGA) and Video Graphics Array (VGA) fonts on the console
setkeycodes
Loads kernel scancode-to-keycode mapping table entries; this is useful if there are unusual keys on the keyboard
setleds
Sets the keyboard flags and Light Emitting Diodes (LEDs)
setmetamode
Defines the keyboard meta-key handling
showconsolefont
Shows the current EGA/VGA console screen font
showkey
Reports the scancodes, keycodes, and ASCII codes of the keys pressed on the keyboard
unicode_start
Puts the keyboard and console in UNICODE mode. Don't use this program unless your keymap file is in the ISO-8859-1 encoding. For other encodings, this utility produces incorrect results.
unicode_stop
Reverts keyboard and console from UNICODE mode
6.52. Kmod-16
The Kmod package contains libraries and utilities for loading kernel modules

Approximate build time:
0.1 SBU
Required disk space:
34 MB
6.52.1. Installation of Kmod

Prepare Kmod for compilation:

./configure --prefix=/usr          \
            --bindir=/bin          \
            --sysconfdir=/etc      \
            --with-rootlibdir=/lib \
            --disable-manpages     \
            --with-xz              \
            --with-zlib
The meaning of the configure options:

--with-xz, --with-zlib
These options enable Kmod to handle compressed kernel modules.
--disable-manpages
This option prevents the man pages from being built, as they rely on libxslt, which isn't available in the chroot environment.
--with-rootlibdir=/lib
This option ensures different library related files are placed in the correct directories.
Compile the package:

make
To test the results, issue:

make check
Install the package, man pages, and create symlinks for compatibility with Module-Init-Tools (the package that previously handled Linux kernel modules). Also make sure that all libraries are in the correct directory:

make install
make -C man install

for target in depmod insmod modinfo modprobe rmmod; do
  ln -sv ../bin/kmod /sbin/$target
done

ln -sv kmod /bin/lsmod
6.52.2. Contents of Kmod

Installed programs:
depmod (link to kmod), insmod (link to kmod), kmod, lsmod (link to kmod), modinfo (link to kmod), modprobe (link to kmod), and rmmod (link to kmod)
Installed libraries:
libkmod.so
Short Descriptions

depmod
Creates a dependency file based on the symbols it finds in the existing set of modules; this dependency file is used by modprobe to automatically load the required modules
insmod
Installs a loadable module in the running kernel
kmod
Loads and unloads kernel modules
lsmod
Lists currently loaded modules
modinfo
Examines an object file associated with a kernel module and displays any information that it can glean
modprobe
Uses a dependency file, created by depmod, to automatically load relevant modules
rmmod
Unloads modules from the running kernel
libkmod
This library is used by other programs to load and unload kernel modules
6.53. Libpipeline-1.2.6
The Libpipeline package contains a library for manipulating pipelines of subprocesses in a flexible and convenient way.

Approximate build time:
0.2 SBU
Required disk space:
7.4 MB
6.53.1. Installation of Libpipeline

Prepare Libpipeline for compilation:

PKG_CONFIG_PATH=/tools/lib/pkgconfig ./configure --prefix=/usr
The meaning of the configure options:

PKG_CONFIG_PATH
Use pkg-config to obtain the location of the test library metadata built in Section 5.14, “Check-0.9.12”.
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.53.2. Contents of Libpipeline

Installed libraries:
libpipeline.so
Short Descriptions

libpipeline
This library is used to safely construct pipelines between subprocesses
6.54. Make-4.0
The Make package contains a program for compiling packages.

Approximate build time:
0.4 SBU
Required disk space:
11.3 MB
6.54.1. Installation of Make

Prepare Make for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.54.2. Contents of Make

Installed program:
make
Short Descriptions

make
Automatically determines which pieces of a package need to be (re)compiled and then issues the relevant commands
6.55. Patch-2.7.1
The Patch package contains a program for modifying or creating files by applying a “patch” file typically created by the diff program.

Approximate build time:
less than 0.1 SBU
Required disk space:
3.4 MB
6.55.1. Installation of Patch

Prepare Patch for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.55.2. Contents of Patch

Installed program:
patch
Short Descriptions

patch
Modifies files according to a patch file. A patch file is normally a difference listing created with the diff program. By applying these differences to the original files, patch creates the patched versions.
6.56. Sysklogd-1.5
The Sysklogd package contains programs for logging system messages, such as those given by the kernel when unusual things happen.

Approximate build time:
less than 0.1 SBU
Required disk space:
0.6 MB
6.56.1. Installation of Sysklogd

Compile the package:

make
This package does not come with a test suite.

Install the package:

make BINDIR=/sbin install
6.56.2. Configuring Sysklogd

Create a new /etc/syslog.conf file by running the following:

cat > /etc/syslog.conf << "EOF"
# Begin /etc/syslog.conf

auth,authpriv.* -/var/log/auth.log
*.*;auth,authpriv.none -/var/log/sys.log
daemon.* -/var/log/daemon.log
kern.* -/var/log/kern.log
mail.* -/var/log/mail.log
user.* -/var/log/user.log
*.emerg *

# End /etc/syslog.conf
EOF
6.56.3. Contents of Sysklogd

Installed programs:
klogd and syslogd
Short Descriptions

klogd
A system daemon for intercepting and logging kernel messages
syslogd
Logs the messages that system programs offer for logging. Every logged message contains at least a date stamp and a hostname, and normally the program's name too, but that depends on how trusting the logging daemon is told to be
6.57. Sysvinit-2.88dsf
The Sysvinit package contains programs for controlling the startup, running, and shutdown of the system.

Approximate build time:
less than 0.1 SBU
Required disk space:
1.4 MB
6.57.1. Installation of Sysvinit

First, apply a patch that removes several programs installed by other packages, clarifies a message, and fixes a compiler warning:

patch -Np1 -i ../sysvinit-2.88dsf-consolidated-1.patch
Compile the package:

make -C src
This package does not come with a test suite.

Install the package:

make -C src install
6.57.2. Contents of Sysvinit

Installed programs:
bootlogd, fstab-decode, halt, init, killall5, poweroff (link to halt), reboot (link to halt), runlevel, shutdown, and telinit (link to init)
Short Descriptions

bootlogd
Logs boot messages to a log file
fstab-decode
Run a command with fstab-encoded arguments
halt
Normally invokes shutdown with the -h option, except when already in run-level 0, then it tells the kernel to halt the system; it notes in the file /var/log/wtmp that the system is being brought down
init
The first process to be started when the kernel has initialized the hardware which takes over the boot process and starts all the proceses it is instructed to
killall5
Sends a signal to all processes, except the processes in its own session so it will not kill the shell running the script that called it
poweroff
Tells the kernel to halt the system and switch off the computer (see halt)
reboot
Tells the kernel to reboot the system (see halt)
runlevel
Reports the previous and the current run-level, as noted in the last run-level record in /var/run/utmp
shutdown
Brings the system down in a secure way, signaling all processes and notifying all logged-in users
telinit
Tells init which run-level to change to
6.58. Tar-1.27.1
The Tar package contains an archiving program.

Approximate build time:
2.4 SBU
Required disk space:
34 MB
6.58.1. Installation of Tar

Add a program that generates a man page for tar from the source code:

patch -Np1 -i ../tar-1.27.1-manpage-1.patch
Prepare Tar for compilation:

FORCE_UNSAFE_CONFIGURE=1  \
./configure --prefix=/usr \
            --bindir=/bin
The meaning of the configure options:

FORCE_UNSAFE_CONFIGURE=1
This forces the test for mknod to be run as root. It is generally considered dangerous to run this test as the root user, but as it is being run on a system that has only been partially built, overriding it is OK.
Compile the package:

make
To test the results (about 1 SBU), issue:

make check
Install the package:

make install
make -C doc install-html docdir=/usr/share/doc/tar-1.27.1
Finally, generate the man page and place it in the proper location:

perl tarman > /usr/share/man/man1/tar.1
6.58.2. Contents of Tar

Installed programs:
rmt and tar
Installed directory:
/usr/share/doc/tar-1.27.1
Short Descriptions

rmt
Remotely manipulates a magnetic tape drive through an interprocess communication connection
tar
Creates, extracts files from, and lists the contents of archives, also known as tarballs
6.59. Texinfo-5.2
The Texinfo package contains programs for reading, writing, and converting info pages.

Approximate build time:
0.6 SBU
Required disk space:
101 MB
6.59.1. Installation of Texinfo

Prepare Texinfo for compilation:

./configure --prefix=/usr
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
Optionally, install the components belonging in a TeX installation:

make TEXMF=/usr/share/texmf install-tex
The meaning of the make parameter:

TEXMF=/usr/share/texmf
The TEXMF makefile variable holds the location of the root of the TeX tree if, for example, a TeX package will be installed later.
The Info documentation system uses a plain text file to hold its list of menu entries. The file is located at /usr/share/info/dir. Unfortunately, due to occasional problems in the Makefiles of various packages, it can sometimes get out of sync with the info pages installed on the system. If the /usr/share/info/dir file ever needs to be recreated, the following optional commands will accomplish the task:

cd /usr/share/info
rm -v dir
for f in *
do install-info $f dir 2>/dev/null
done
6.59.2. Contents of Texinfo

Installed programs:
info, infokey, install-info, makeinfo (link to texi2any), pdftexi2dvi, pod2texi, texi2any, texi2dvi, texi2pdf, and texindex
Installed directory:
/usr/share/texinfo
Short Descriptions

info
Used to read info pages which are similar to man pages, but often go much deeper than just explaining all the available command line options. For example, compare man bison and info bison.
infokey
Compiles a source file containing Info customizations into a binary format
install-info
Used to install info pages; it updates entries in the info index file
makeinfo
Translates the given Texinfo source documents into info pages, plain text, or HTML
pdftexi2dvi
Used to format the given Texinfo document into a Portable Document Format (PDF) file
pod2texi
Converts Pod to Texinfo format
texi2any
Translate Texinfo source documentation to various other formats
texi2dvi
Used to format the given Texinfo document into a device-independent file that can be printed
texi2pdf
Used to format the given Texinfo document into a Portable Document Format (PDF) file
texindex
Used to sort Texinfo index files
6.60. Udev-208 (Extracted from systemd-208)
The Udev package contains programs for dynamic creation of device nodes. The development of udev has been merged with systemd, but most of systemd is incompatible with LFS. Here we build and install just the needed udev files.

Approximate build time:
0.1 SBU
Required disk space:
29 MB
6.60.1. Installation of Udev

Note

This package is a little different from other packages. The initial package that is extracted is systemd-208.tar.xz even though the application we are installing is udev. After changing to the systemd directory, follow the instructions below.

The udev-lfs tarball contains LFS-specific files used to build Udev. Unpack it into the systemd source directory:

tar -xvf ../udev-lfs-208-3.tar.bz2
Create two symbolic links to header files and set an environment variable to properly use Section 5.33, “Util-linux-2.24.1”.

ln -svf /tools/include/blkid /usr/include
ln -svf /tools/include/uuid  /usr/include
export LD_LIBRARY_PATH=/tools/lib
Build the package:

make -f udev-lfs-208-3/Makefile.lfs
Install the package:

make -f udev-lfs-208-3/Makefile.lfs install
Caution

There are several places within the systemd source code that have explicit directory paths embedded. For instance, the binary version of the hardware database's path and file name used at run time, /etc/udev/hwdb.bin, cannot be changed without explicit changes to the source code.

Now initialize the hardware database:

build/udevadm hwdb --update
Finally set up the persistent network udev rules. This task will be explained in detail in Section 7.2.1, “Creating stable names for network interfaces”. Note that the /sys and /proc filesystems must be mounted in the chroot environment as explained at the beginning of this chapter for the following script to work.

bash udev-lfs-208-3/init-net-rules.sh
Do some cleanup:

rm -fv /usr/include/{uuid,blkid}
unset LD_LIBRARY_PATH
6.60.2. Contents of Udev

Installed programs:
accelerometer, ata_id, cdrom_id, collect, mtd_probe, scsi_id, v4l_id, udevadm, and udevd
Installed libraries:
libudev.so
Installed directories:
/etc/udev, /lib/udev, /lib/firmware, /usr/share/doc/udev
Short Descriptions

ata_id
Provides Udev with a unique string and additional information (uuid, label) for an ATA drive
cdrom_id
Provides Udev with the capabilities of a CD-ROM or DVD-ROM drive
collect
Given an ID for the current uevent and a list of IDs (for all target uevents), registers the current ID and indicates whether all target IDs have been registered
scsi_id
Provides Udev with a unique SCSI identifier based on the data returned from sending a SCSI INQUIRY command to the specified device
udevadm
Generic udev administration tool: controls the udevd daemon, provides info from the Udev database, monitors uevents, waits for uevents to finish, tests Udev configuration, and triggers uevents for a given device
udevd
A daemon that listens for uevents on the netlink socket, creates devices and runs the configured external programs in response to these uevents
libudev
A library interface to udev device information
/etc/udev
Contains Udev configuration files, device permissions, and rules for device naming
6.61. Util-linux-2.24.1
The Util-linux package contains miscellaneous utility programs. Among them are utilities for handling file systems, consoles, partitions, and messages.

Approximate build time:
0.6 SBU
Required disk space:
89 MB
6.61.1. FHS compliance notes

The FHS recommends using the /var/lib/hwclock directory instead of the usual /etc directory as the location for the adjtime file. To make the hwclock program FHS-compliant, run the following:

sed -i -e 's@etc/adjtime@var/lib/hwclock/adjtime@g' \
          $(grep -rl '/etc/adjtime' .)

mkdir -pv /var/lib/hwclock
6.61.2. Installation of Util-linux

Prepare Util-linux for compilation:

./configure
Compile the package:

make
If desired, run the test suite as a non-root user:

Warning

Running the test suite as the root user can be harmful to your system. To run it, the CONFIG_SCSI_DEBUG option for the kernel must be available in the currently running system, and must be built as a module. Building it into the kernel will prevent booting. For complete coverage, other BLFS packages must be installed. If desired, this test can be run after rebooting into the completed LFS system and running:

bash tests/run.sh --srcdir=$PWD --builddir=$PWD
Note

Two tests, last/ipv6 and last/last, fail in the chroot environment due to the DNS resolver not being active yet. If the tests are rerun after booting, they pass.

chown -Rv nobody .
su nobody -s /bin/bash -c "PATH=$PATH make -k check"
Install the package:

make install
6.61.3. Contents of Util-linux

Installed programs:
addpart, agetty, blkdiscard, blkid, blockdev, cal, cfdisk, chcpu, chrt, col, colcrt, colrm, column, ctrlaltdel, cytune, delpart, dmesg, eject, fallocate, fdformat, fdisk, findfs, findmnt, flock, fsck, fsck.cramfs, fsck.minix, fsfreeze, fstrim, getopt, hexdump, hwclock, i386, ionice, ipcmk, ipcrm, ipcs, isosize, kill, last, lastb (link to last), ldattach, linux32, linux64, logger, look, losetup, lsblk, lscpu, lslocks, mcookie, mkfs, mkfs.bfs, mkfs.cramfs, mkfs.minix, mkswap, more, mount, mountpoint, namei, partx, pg, pivot_root, prlimit, raw, readprofile, rename, renice, resizepart, rev, rtcwake, script, scriptreplay, setarch, setsid, setterm, sfdisk, sulogin, swaplabel, swapoff (link to swapon), swapon, switch_root, tailf, taskset, ul, umount, unshare, utmpdump, uuidd, uuidgen, wall, wdctl, whereis, wipefs, and x86_64
Installed libraries:
libblkid.{a,so}, libmount.{a,so}, libuuid.{a,so}
Installed directories:
/usr/include/blkid, /usr/include/libmount, /usr/include/uuid, /usr/share/doc/util-linux/getopt, /var/lib/hwclock
Short Descriptions

addpart
Informs the Linux kernel of new partitions
agetty
Opens a tty port, prompts for a login name, and then invokes the login program
blkdiscard
Discards sectors on a device
blkid
A command line utility to locate and print block device attributes
blockdev
Allows users to call block device ioctls from the command line
cal
Displays a simple calendar
cfdisk
Manipulates the partition table of the given device
chcpu
Modifies the state of CPUs
chrt
Manipulates real-time attributes of a process
col
Filters out reverse line feeds
colcrt
Filters nroff output for terminals that lack some capabilities, such as overstriking and half-lines
colrm
Filters out the given columns
column
Formats a given file into multiple columns
ctrlaltdel
Sets the function of the Ctrl+Alt+Del key combination to a hard or a soft reset
cytune
Tunes the parameters of the serial line drivers for Cyclades cards
delpart
Asks the Linux kernel to remove a partition
dmesg
Dumps the kernel boot messages
eject
Ejects removable media
fallocate
Preallocates space to a file
fdformat
Low-level formats a floppy disk
fdisk
Manipulates the paritition table of the given device
findfs
Finds a file system by label or Universally Unique Identifier (UUID)
findmnt
Is a command line interface to the libmount library for work with mountinfo, fstab and mtab files
flock
Acquires a file lock and then executes a command with the lock held
fsck
Is used to check, and optionally repair, file systems
fsck.cramfs
Performs a consistency check on the Cramfs file system on the given device
fsck.minix
Performs a consistency check on the Minix file system on the given device
fsfreeze
Is a very simple wrapper around FIFREEZE/FITHAW ioctl kernel driver operations
fstrim
Discards unused blocks on a mounted filesystem
getopt
Parses options in the given command line
hexdump
Dumps the given file in hexadecimal or in another given format
hwclock
Reads or sets the system's hardware clock, also called the Real-Time Clock (RTC) or Basic Input-Output System (BIOS) clock
i386
A symbolic link to setarch
ionice
Gets or sets the io scheduling class and priority for a program
ipcmk
Creates various IPC resources
ipcrm
Removes the given Inter-Process Communication (IPC) resource
ipcs
Provides IPC status information
isosize
Reports the size of an iso9660 file system
kill
Sends signals to processes
last
Shows which users last logged in (and out), searching back through the /var/log/wtmp file; it also shows system boots, shutdowns, and run-level changes
lastb
Shows the failed login attempts, as logged in /var/log/btmp
ldattach
Attaches a line discipline to a serial line
linux32
A symbolic link to setarch
linux64
A symbolic link to setarch
logger
Enters the given message into the system log
look
Displays lines that begin with the given string
losetup
Sets up and controls loop devices
lsblk
Lists information about all or selected block devices in a tree-like format.
lscpu
Prints CPU architecture information
lslocks
Lists local system locks
mcookie
Generates magic cookies (128-bit random hexadecimal numbers) for xauth
mesg
Controls whether other users can send messages to the current user's terminal
mkfs
Builds a file system on a device (usually a hard disk partition)
mkfs.bfs
Creates a Santa Cruz Operations (SCO) bfs file system
mkfs.cramfs
Creates a cramfs file system
mkfs.minix
Creates a Minix file system
mkswap
Initializes the given device or file to be used as a swap area
more
A filter for paging through text one screen at a time
mount
Attaches the file system on the given device to a specified directory in the file-system tree
mountpoint
Checks if the directory is a mountpoint
namei
Shows the symbolic links in the given pathnames
nsenter
Runs a program with namespaces of other processes
partx
Tells the kernel about the presence and numbering of on-disk partitions
pg
Displays a text file one screen full at a time
pivot_root
Makes the given file system the new root file system of the current process
prlimit
Get and set a process' resource limits
raw
Bind a Linux raw character device to a block device
readprofile
Reads kernel profiling information
rename
Renames the given files, replacing a given string with another
renice
Alters the priority of running processes
resizepart
Asks the Linux kernel to resize a partition
rev
Reverses the lines of a given file
rtcwake
Used to enter a system sleep state until specified wakeup time
script
Makes a typescript of a terminal session
scriptreplay
Plays back typescripts using timing information
setarch
Changes reported architecture in a new program environment and sets personality flags
setsid
Runs the given program in a new session
setterm
Sets terminal attributes
sfdisk
A disk partition table manipulator
sulogin
Allows root to log in; it is normally invoked by init when the system goes into single user mode
swaplabel
Allows to change swaparea UUID and label
swapoff
Disables devices and files for paging and swapping
swapon
Enables devices and files for paging and swapping and lists the devices and files currently in use
switch_root
Switches to another filesystem as the root of the mount tree
tailf
Tracks the growth of a log file. Displays the last 10 lines of a log file, then continues displaying any new entries in the log file as they are created
taskset
Retrieves or sets a process' CPU affinity
ul
A filter for translating underscores into escape sequences indicating underlining for the terminal in use
umount
Disconnects a file system from the system's file tree
unshare
Runs a program with some namespaces unshared from parent
utmpdump
Displays the content of the given login file in a more user-friendly format
uuidd
A daemon used by the UUID library to generate time-based UUIDs in a secure and guranteed-unique fashion.
uuidgen
Creates new UUIDs. Each new UUID can reasonably be considered unique among all UUIDs created, on the local system and on other systems, in the past and in the future
wall
Displays the contents of a file or, by default, its standard input, on the terminals of all currently logged in users
wdctl
Shows hardware watchdog status
whereis
Reports the location of the binary, source, and man page for the given command
wipefs
Wipes a filesystem signature from a device
x86_64
A symbolic link to setarch
libblkid
Contains routines for device identification and token extraction
libmount
Contains routines for block device mounting and unmounting
libuuid
Contains routines for generating unique identifiers for objects that may be accessible beyond the local system
6.62. Man-DB-2.6.6
The Man-DB package contains programs for finding and viewing man pages.

Approximate build time:
0.5 SBU
Required disk space:
27 MB
6.62.1. Installation of Man-DB

Prepare Man-DB for compilation:

./configure --prefix=/usr                        \
            --docdir=/usr/share/doc/man-db-2.6.6 \
            --sysconfdir=/etc                    \
            --disable-setuid                     \
            --with-browser=/usr/bin/lynx         \
            --with-vgrind=/usr/bin/vgrind        \
            --with-grap=/usr/bin/grap
The meaning of the configure options:

--disable-setuid
This disables making the man program setuid to user man.
--with-...
These three parameters are used to set some default programs. lynx is a text-based web browser (see BLFS for installation instructions), vgrind converts program sources to Groff input, and grap is useful for typesetting graphs in Groff documents. The vgrind and grap programs are not normally needed for viewing manual pages. They are not part of LFS or BLFS, but you should be able to install them yourself after finishing LFS if you wish to do so.
Compile the package:

make
To test the results, issue:

make check
Install the package:

make install
6.62.2. Non-English Manual Pages in LFS

The following table shows the character set that Man-DB assumes manual pages installed under /usr/share/man/<ll> will be encoded with. In addition to this, Man-DB correctly determines if manual pages installed in that directory are UTF-8 encoded.

Table 6.1. Expected character encoding of legacy 8-bit manual pages
Language (code) Encoding    Language (code) Encoding
Danish (da) ISO-8859-1  Croatian (hr)   ISO-8859-2
German (de) ISO-8859-1  Hungarian (hu)  ISO-8859-2
English (en)    ISO-8859-1  Japanese (ja)   EUC-JP
Spanish (es)    ISO-8859-1  Korean (ko) EUC-KR
Estonian (et)   ISO-8859-1  Lithuanian (lt) ISO-8859-13
Finnish (fi)    ISO-8859-1  Latvian (lv)    ISO-8859-13
French (fr) ISO-8859-1  Macedonian (mk) ISO-8859-5
Irish (ga)  ISO-8859-1  Polish (pl) ISO-8859-2
Galician (gl)   ISO-8859-1  Romanian (ro)   ISO-8859-2
Indonesian (id) ISO-8859-1  Russian (ru)    KOI8-R
Icelandic (is)  ISO-8859-1  Slovak (sk) ISO-8859-2
Italian (it)    ISO-8859-1  Slovenian (sl)  ISO-8859-2
Norwegian Bokmal (nb)   ISO-8859-1  Serbian Latin (sr@latin)    ISO-8859-2
Dutch (nl)  ISO-8859-1  Serbian (sr)    ISO-8859-5
Norwegian Nynorsk (nn)  ISO-8859-1  Turkish (tr)    ISO-8859-9
Norwegian (no)  ISO-8859-1  Ukrainian (uk)  KOI8-U
Portuguese (pt) ISO-8859-1  Vietnamese (vi) TCVN5712-1
Swedish (sv)    ISO-8859-1  Simplified Chinese (zh_CN)  GBK
Belarusian (be) CP1251  Simplified Chinese, Singapore (zh_SG)   GBK
Bulgarian (bg)  CP1251  Traditional Chinese, Hong Kong (zh_HK)  BIG5HKSCS
Czech (cs)  ISO-8859-2  Traditional Chinese (zh_TW) BIG5
Greek (el)  ISO-8859-7       
Note

Manual pages in languages not in the list are not supported.

6.62.3. Contents of Man-DB

Installed programs:
accessdb, apropos (link to whatis), catman, lexgrog, man, mandb, manpath, whatis, and zsoelim
Installed libraries:
libman.so, libmandb.so
Installed directories:
/usr/lib/man-db, /usr/libexec/man-db, /usr/share/doc/man-db-2.6.6
Short Descriptions

accessdb
Dumps the whatis database contents in human-readable form
apropos
Searches the whatis database and displays the short descriptions of system commands that contain a given string
catman
Creates or updates the pre-formatted manual pages
lexgrog
Displays one-line summary information about a given manual page
man
Formats and displays the requested manual page
mandb
Creates or updates the whatis database
manpath
Displays the contents of $MANPATH or (if $MANPATH is not set) a suitable search path based on the settings in man.conf and the user's environment
whatis
Searches the whatis database and displays the short descriptions of system commands that contain the given keyword as a separate word
zsoelim
Reads files and replaces lines of the form .so file by the contents of the mentioned file
libman
Contains run-time support for man
libmandb
Contains run-time support for man
6.63. Vim-7.4
The Vim package contains a powerful text editor.

Approximate build time:
1.4 SBU
Required disk space:
121 MB
Alternatives to Vim

If you prefer another editor—such as Emacs, Joe, or Nano—please refer to http://www.linuxfromscratch.org/blfs/view/svn/postlfs/editors.html for suggested installation instructions.

6.63.1. Installation of Vim

First, change the default location of the vimrc configuration file to /etc:

echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> src/feature.h
Prepare Vim for compilation:

./configure --prefix=/usr --enable-multibyte
The meaning of the configure options:

--enable-multibyte
This switch enables support for editing files in multibyte character encodings. This is needed if using a locale with a multibyte character set. This switch is also helpful to be able to edit text files initially created in Linux distributions like Fedora that use UTF-8 as a default character set.
Compile the package:

make
To test the results, issue:

make test
However, this test suite outputs a lot of binary data to the screen, which can cause issues with the settings of the current terminal. This can be resolved by redirecting the output to a log file. A successful test will result in the words "ALL DONE" at completion.

Install the package:

make install
Many users are used to using vi instead of vim. To allow execution of vim when users habitually enter vi, create a symlink for both the binary and the man page in the provided languages:

ln -sv vim /usr/bin/vi
for L in  /usr/share/man/{,*/}man1/vim.1; do
    ln -sv vim.1 $(dirname $L)/vi.1
done
By default, Vim's documentation is installed in /usr/share/vim. The following symlink allows the documentation to be accessed via /usr/share/doc/vim-7.4, making it consistent with the location of documentation for other packages:

ln -sv ../vim/vim74/doc /usr/share/doc/vim-7.4
If an X Window System is going to be installed on the LFS system, it may be necessary to recompile Vim after installing X. Vim comes with a GUI version of the editor that requires X and some additional libraries to be installed. For more information on this process, refer to the Vim documentation and the Vim installation page in the BLFS book at http://www.linuxfromscratch.org/blfs/view/svn/postlfs/editors.html#postlfs-editors-vim.

6.63.2. Configuring Vim

By default, vim runs in vi-incompatible mode. This may be new to users who have used other editors in the past. The “nocompatible” setting is included below to highlight the fact that a new behavior is being used. It also reminds those who would change to “compatible” mode that it should be the first setting in the configuration file. This is necessary because it changes other settings, and overrides must come after this setting. Create a default vim configuration file by running the following:

cat > /etc/vimrc << "EOF"
" Begin /etc/vimrc

set nocompatible
set backspace=2
syntax on
if (&term == "iterm") || (&term == "putty")
  set background=dark
endif

" End /etc/vimrc
EOF
The set nocompatible setting makes vim behave in a more useful way (the default) than the vi-compatible manner. Remove the “no” to keep the old vi behavior. The set backspace=2 setting allows backspacing over line breaks, autoindents, and the start of insert. The syntax on parameter enables vim's syntax highlighting. Finally, the if statement with the set background=dark setting corrects vim's guess about the background color of some terminal emulators. This gives the highlighting a better color scheme for use on the black background of these programs.

Documentation for other available options can be obtained by running the following command:

vim -c ':options'
Note

By default, Vim only installs spell files for the English language. To install spell files for your preferred language, download the *.spl and optionally, the *.sug files for your language and character encoding from ftp://ftp.vim.org/pub/vim/runtime/spell/ and save them to /usr/share/vim/vim74/spell/.

To use these spell files, some configuration in /etc/vimrc is needed, e.g.:

set spelllang=en,ru
set spell
For more information, see the appropriate README file located at the URL above.

6.63.3. Contents of Vim

Installed programs:
ex (link to vim), rview (link to vim), rvim (link to vim), vi (link to vim), view (link to vim), vim, vimdiff (link to vim), vimtutor, and xxd
Installed directory:
/usr/share/vim
Short Descriptions

ex
Starts vim in ex mode
rview
Is a restricted version of view; no shell commands can be started and view cannot be suspended
rvim
Is a restricted version of vim; no shell commands can be started and vim cannot be suspended
vi
Link to vim
view
Starts vim in read-only mode
vim
Is the editor
vimdiff
Edits two or three versions of a file with vim and show differences
vimtutor
Teaches the basic keys and commands of vim
xxd
Creates a hex dump of the given file; it can also do the reverse, so it can be used for binary patching
6.64. About Debugging Symbols

Most programs and libraries are, by default, compiled with debugging symbols included (with gcc's -g option). This means that when debugging a program or library that was compiled with debugging information included, the debugger can provide not only memory addresses, but also the names of the routines and variables.

However, the inclusion of these debugging symbols enlarges a program or library significantly. The following is an example of the amount of space these symbols occupy:

A bash binary with debugging symbols: 1200 KB

A bash binary without debugging symbols: 480 KB

Glibc and GCC files (/lib and /usr/lib) with debugging symbols: 87 MB

Glibc and GCC files without debugging symbols: 16 MB

Sizes may vary depending on which compiler and C library were used, but when comparing programs with and without debugging symbols, the difference will usually be a factor between two and five.

Because most users will never use a debugger on their system software, a lot of disk space can be regained by removing these symbols. The next section shows how to strip all debugging symbols from the programs and libraries.

6.65. Stripping Again

If the intended user is not a programmer and does not plan to do any debugging on the system software, the system size can be decreased by about 90 MB by removing the debugging symbols from binaries and libraries. This causes no inconvenience other than not being able to debug the software fully anymore.

Most people who use the command mentioned below do not experience any difficulties. However, it is easy to make a typo and render the new system unusable, so before running the strip command, it is a good idea to make a backup of the LFS system in its current state.

Before performing the stripping, take special care to ensure that none of the binaries that are about to be stripped are running. If unsure whether the user entered chroot with the command given in Section 6.4, “Entering the Chroot Environment,” first exit from chroot:

logout
Then reenter it with:

chroot $LFS /tools/bin/env -i            \
    HOME=/root TERM=$TERM PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin   \
    /tools/bin/bash --login
Now the binaries and libraries can be safely stripped:

/tools/bin/find /{,usr/}{bin,lib,sbin} -type f \
    -exec /tools/bin/strip --strip-debug '{}' ';'
A large number of files will be reported as having their file format not recognized. These warnings can be safely ignored. These warnings indicate that those files are scripts instead of binaries.

6.66. Cleaning Up

Finally, clean up some extra files left around from running tests:

rm -rf /tmp/*
From now on, when reentering the chroot environment after exiting, use the following modified chroot command:

chroot "$LFS" /usr/bin/env -i              \
    HOME=/root TERM="$TERM" PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin     \
    /bin/bash --login
The reason for this is that the programs in /tools are no longer needed. Since they are no longer needed you can delete the /tools directory if so desired.

Note

Removing /tools will also remove the temporary copies of Tcl, Expect, and DejaGNU which were used for running the toolchain tests. If you need these programs later on, they will need to be recompiled and re-installed. The BLFS book has instructions for this (see http://www.linuxfromscratch.org/blfs/).

rm -rf /tools
If the virtual kernel file systems have been unmounted, either manually or through a reboot, ensure that the virtual kernel file systems are mounted when reentering the chroot. This process was explained in Section 6.2.2, “Mounting and Populating /dev” and Section 6.2.3, “Mounting Virtual Kernel File Systems”.

Chapter 7. Setting Up System Bootscripts

7.1. Introduction

This chapter discusses configuration files and boot scripts. First, the general configuration files needed to set up networking are presented.

Section 7.2, “General Network Configuration.”

Section 7.3, “Customizing the /etc/hosts File.”

Second, issues that affect the proper setup of devices are discussed.

Section 7.4, “Device and Module Handling on an LFS System.”

Section 7.5, “Creating Custom Symlinks to Devices.”

The next sections detail how to install and configure the LFS system scripts needed during the boot process. Most of these scripts will work without modification, but a few require additional configuration files because they deal with hardware-dependent information.

System-V style init scripts are employed in this book because they are widely used and relatively simple. For additional options, a hint detailing the BSD style init setup is available at http://www.linuxfromscratch.org/hints/downloads/files/bsd-init.txt. Searching the LFS mailing lists for “depinit”, “upstart”, or “systemd” will also offer additional information.

If using an alternative style of init scripts, skip these sections.

A listing of the boot scripts are found in Appendix D.

Section 7.6, “LFS-Bootscripts-20130821.”

Section 7.7, “How Do These Bootscripts Work?.”

Section 7.8, “Configuring the system hostname.”

Section 7.9, “Configuring the setclock Script.”

Section 7.10, “Configuring the Linux Console.”

Section 7.11, “Configuring the sysklogd Script.”

Finally, there is a brief introduction to the scripts and configuration files used when the user logs into the system.

Section 7.13, “The Bash Shell Startup Files.”

Section 7.14, “Creating the /etc/inputrc File.”

7.2. General Network Configuration

This section only applies if a network card is to be configured.

If a network card will not be used, there is likely no need to create any configuration files relating to network cards. If that is the case, you will need to remove the network symlinks from all run-level directories (/etc/rc.d/rc*.d) after the bootscripts are installed in Section 7.6, “LFS-Bootscripts-20130821”.

7.2.1. Creating stable names for network interfaces

If there is only one network interface in the system to be configured, this section is optional, although it will never be wrong to do it. In many cases (e.g. a laptop with a wireless and a wired interface), accomplishing the configuration in this section is necessary.

With Udev and modular network drivers, the network interface numbering is not persistent across reboots by default, because the drivers are loaded in parallel and, thus, in random order. For example, on a computer having two network cards made by Intel and Realtek, the network card manufactured by Intel may become eth0 and the Realtek card becomes eth1. In some cases, after a reboot the cards get renumbered the other way around. To avoid this, Udev comes with a script and some rules to assign stable names to network cards based on their MAC address.

The rules were pre-generated in the build instructions for udev (systemd) in the last chapter. Inspect the /etc/udev/rules.d/70-persistent-net.rules file, to find out which name was assigned to which network device:

cat /etc/udev/rules.d/70-persistent-net.rules
Note

In some cases such as when MAC addresess have been assigned to a network card manually or in a virtual environment such as Xen, the network rules file may not have been generated because addresses are not consistently assigned. In these cases, just continue to the next section.

The file begins with a comment block followed by two lines for each NIC. The first line for each NIC is a commented description showing its hardware IDs (e.g. its PCI vendor and device IDs, if it's a PCI card), along with its driver in parentheses, if the driver can be found. Neither the hardware ID nor the driver is used to determine which name to give an interface; this information is only for reference. The second line is the Udev rule that matches this NIC and actually assigns it a name.

All Udev rules are made up of several keys, separated by commas and optional whitespace. This rule's keys and an explanation of each of them are as follows:

SUBSYSTEM=="net" - This tells Udev to ignore devices that are not network cards.

ACTION=="add" - This tells Udev to ignore this rule for a uevent that isn't an add ("remove" and "change" uevents also happen, but don't need to rename network interfaces).

DRIVERS=="?*" - This exists so that Udev will ignore VLAN or bridge sub-interfaces (because these sub-interfaces do not have drivers). These sub-interfaces are skipped because the name that would be assigned would collide with their parent devices.

ATTR{address} - The value of this key is the NIC's MAC address.

ATTR{type}=="1" - This ensures the rule only matches the primary interface in the case of certain wireless drivers, which create multiple virtual interfaces. The secondary interfaces are skipped for the same reason that VLAN and bridge sub-interfaces are skipped: there would be a name collision otherwise.

KERNEL=="eth*" - This key was added to the Udev rule generator to handle machines that have multiple network interfaces, all with the same MAC address (the PS3 is one such machine). If the independent interfaces have different basenames, this key will allow Udev to tell them apart. This is generally not necessary for most Linux From Scratch users, but does not hurt.

NAME - The value of this key is the name that Udev will assign to this interface.

The value of NAME is the important part. Make sure you know which name has been assigned to each of your network cards before proceeding, and be sure to use that NAME value when creating your configuration files below.

7.2.2. Creating Network Interface Configuration Files

Which interfaces are brought up and down by the network script depends on the files in /etc/sysconfig/. This directory should contain a file for each interface to be configured, such as ifconfig.xyz, where “xyz” is meaningful to the administrator such as the device name (e.g. eth0). Inside this file are attributes to this interface, such as its IP address(es), subnet masks, and so forth. It is necessary that the stem of the filename be ifconfig.

The following command creates a sample file for the eth0 device with a static IP address:

cd /etc/sysconfig/
cat > ifconfig.eth0 << "EOF"
ONBOOT=yes
IFACE=eth0
SERVICE=ipv4-static
IP=192.168.1.1
GATEWAY=192.168.1.2
PREFIX=24
BROADCAST=192.168.1.255
EOF
The values of these variables must be changed in every file to match the proper setup.

If the ONBOOT variable is set to “yes” the network script will bring up the Network Interface Card (NIC) during booting of the system. If set to anything but “yes” the NIC will be ignored by the network script and not be automatically brought up. The interface can be manually started or stopped with the ifup and ifdown commands.

The IFACE variable defines the interface name, for example, eth0. It is required for all network device configuration files.

The SERVICE variable defines the method used for obtaining the IP address. The LFS-Bootscripts package has a modular IP assignment format, and creating additional files in the /lib/services/ directory allows other IP assignment methods. This is commonly used for Dynamic Host Configuration Protocol (DHCP), which is addressed in the BLFS book.

The GATEWAY variable should contain the default gateway IP address, if one is present. If not, then comment out the variable entirely.

The PREFIX variable contains the number of bits used in the subnet. Each octet in an IP address is 8 bits. If the subnet's netmask is 255.255.255.0, then it is using the first three octets (24 bits) to specify the network number. If the netmask is 255.255.255.240, it would be using the first 28 bits. Prefixes longer than 24 bits are commonly used by DSL and cable-based Internet Service Providers (ISPs). In this example (PREFIX=24), the netmask is 255.255.255.0. Adjust the PREFIX variable according to your specific subnet. If omitted, the PREFIX defaults to 24.

For more information see the ifup man page.

7.2.3. Creating the /etc/resolv.conf File

If the system is going to be connected to the Internet, it will need some means of Domain Name Service (DNS) name resolution to resolve Internet domain names to IP addresses, and vice versa. This is best achieved by placing the IP address of the DNS server, available from the ISP or network administrator, into /etc/resolv.conf. Create the file by running the following:

cat > /etc/resolv.conf << "EOF"
# Begin /etc/resolv.conf

domain <Your Domain Name>
nameserver <IP address of your primary nameserver>
nameserver <IP address of your secondary nameserver>

# End /etc/resolv.conf
EOF
The domain statement can be omitted or replaced with a search statement. See the man page for resolv.conf for more details.

Replace <IP address of the nameserver> with the IP address of the DNS most appropriate for the setup. There will often be more than one entry (requirements demand secondary servers for fallback capability). If you only need or want one DNS server, remove the second nameserver line from the file. The IP address may also be a router on the local network.

Note

The Google Public IPv4 DNS addresses are 8.8.8.8 and 8.8.4.4.

7.3. Customizing the /etc/hosts File

If a network card is to be configured, decide on the IP address, fully-qualified domain name (FQDN), and possible aliases for use in the /etc/hosts file. The syntax is:

IP_address myhost.example.org aliases
Unless the computer is to be visible to the Internet (i.e., there is a registered domain and a valid block of assigned IP addresses—most users do not have this), make sure that the IP address is in the private network IP address range. Valid ranges are:

Private Network Address Range      Normal Prefix
10.0.0.1 - 10.255.255.254           8
172.x.0.1 - 172.x.255.254           16
192.168.y.1 - 192.168.y.254         24
x can be any number in the range 16-31. y can be any number in the range 0-255.

A valid private IP address could be 192.168.1.1. A valid FQDN for this IP could be lfs.example.org.

Even if not using a network card, a valid FQDN is still required. This is necessary for certain programs to operate correctly.

Create the /etc/hosts file by running:

cat > /etc/hosts << "EOF"
# Begin /etc/hosts (network card version)

127.0.0.1 localhost
<192.168.1.1> <HOSTNAME.example.org> [alias1] [alias2 ...]

# End /etc/hosts (network card version)
EOF
The <192.168.1.1> and <HOSTNAME.example.org> values need to be changed for specific uses or requirements (if assigned an IP address by a network/system administrator and the machine will be connected to an existing network). The optional alias name(s) can be omitted.

If a network card is not going to be configured, create the /etc/hosts file by running:

cat > /etc/hosts << "EOF"
# Begin /etc/hosts (no network card version)

127.0.0.1 <HOSTNAME.example.org> <HOSTNAME> localhost

# End /etc/hosts (no network card version)
EOF
7.4. Device and Module Handling on an LFS System

In Chapter 6, we installed the Udev package. Before we go into the details regarding how this works, a brief history of previous methods of handling devices is in order.

Linux systems in general traditionally use a static device creation method, whereby a great many device nodes are created under /dev (sometimes literally thousands of nodes), regardless of whether the corresponding hardware devices actually exist. This is typically done via a MAKEDEV script, which contains a number of calls to the mknod program with the relevant major and minor device numbers for every possible device that might exist in the world.

Using the Udev method, only those devices which are detected by the kernel get device nodes created for them. Because these device nodes will be created each time the system boots, they will be stored on a devtmpfs file system (a virtual file system that resides entirely in system memory). Device nodes do not require much space, so the memory that is used is negligible.

7.4.1. History

In February 2000, a new filesystem called devfs was merged into the 2.3.46 kernel and was made available during the 2.4 series of stable kernels. Although it was present in the kernel source itself, this method of creating devices dynamically never received overwhelming support from the core kernel developers.

The main problem with the approach adopted by devfs was the way it handled device detection, creation, and naming. The latter issue, that of device node naming, was perhaps the most critical. It is generally accepted that if device names are allowed to be configurable, then the device naming policy should be up to a system administrator, not imposed on them by any particular developer(s). The devfs file system also suffers from race conditions that are inherent in its design and cannot be fixed without a substantial revision to the kernel. It was marked as deprecated for a long period – due to a lack of maintenance – and was finally removed from the kernel in June, 2006.

With the development of the unstable 2.5 kernel tree, later released as the 2.6 series of stable kernels, a new virtual filesystem called sysfs came to be. The job of sysfs is to export a view of the system's hardware configuration to userspace processes. With this userspace-visible representation, the possibility of seeing a userspace replacement for devfs became much more realistic.

7.4.2. Udev Implementation

7.4.2.1. Sysfs

The sysfs filesystem was mentioned briefly above. One may wonder how sysfs knows about the devices present on a system and what device numbers should be used for them. Drivers that have been compiled into the kernel directly register their objects with a sysfs (devtmpfs internally) as they are detected by the kernel. For drivers compiled as modules, this registration will happen when the module is loaded. Once the sysfs filesystem is mounted (on /sys), data which the drivers register with sysfs are available to userspace processes and to udevd for processing (including modifications to device nodes).

7.4.2.2. Device Node Creation

Device files are created by the kernel by the devtmpfs filesystem. Any driver that wishes to register a device node will go through devtmpfs (via the driver core) to do it. When a devtmpfs instance is mounted on /dev, the device node will initially be created with a fixed name, permissions, and owner.

A short time later, the kernel will send a uevent to udevd. Based on the rules specified in the files within the /etc/udev/rules.d, /lib/udev/rules.d, and /run/udev/rules.d directories, udevd will create additional symlinks to the device node, or change its permissions, owner, or group, or modify the internal udevd database entry (name) for that object.

The rules in these three directories are numbered in a similar fashion to the LFS-Bootscripts package and all three directories are merged together. If udevd can't find a rule for the device it is creating, it will leave the permissions and ownership at whatever devtmpfs used initially.

7.4.2.3. Udev Bootscripts

The first LFS bootscript, /etc/init.d/mountvirtfs will copy any devices located in /lib/udev/devices to /dev. This is necessary because some devices, directories, and symlinks are needed before the dynamic device handling processes are available during the early stages of booting a system, or are required by udevd itself. Creating static device nodes in /lib/udev/devices also provides an easy workaround for devices that are not supported by the dynamic device handling infrastructure.

The /etc/rc.d/init.d/udev initscript starts udevd, triggers any "coldplug" devices that have already been created by the kernel and waits for any rules to complete. The script also unsets the uevent handler from the default of /sbin/hotplug . This is done because the kernel no longer needs to call out to an external binary. Instead udevd will listen on a netlink socket for uevents that the kernel raises.

The /etc/rc.d/init.d/udev_retry initscript takes care of re-triggering events for subsystems whose rules may rely on filesystems that are not mounted until the mountfs script is run (in particular, /usr and /var may cause this). This script runs after the mountfs script, so those rules (if re-triggered) should succeed the second time around. It is configured from the /etc/sysconfig/udev_retry file; any words in this file other than comments are considered subsystem names to trigger at retry time. To find the subsystem of a device, use udevadm info --attribute-walk <device> where <device> is an absolute path in /dev or /sys such as /dev/sr0 or /sys/class/rtc.

7.4.2.4. Module Loading

Device drivers compiled as modules may have aliases built into them. Aliases are visible in the output of the modinfo program and are usually related to the bus-specific identifiers of devices supported by a module. For example, the snd-fm801 driver supports PCI devices with vendor ID 0x1319 and device ID 0x0801, and has an alias of “pci:v00001319d00000801sv*sd*bc04sc01i*”. For most devices, the bus driver exports the alias of the driver that would handle the device via sysfs. E.g., the /sys/bus/pci/devices/0000:00:0d.0/modalias file might contain the string “pci:v00001319d00000801sv00001319sd00001319bc04sc01i00”. The default rules provided with Udev will cause udevd to call out to /sbin/modprobe with the contents of the MODALIAS uevent environment variable (which should be the same as the contents of the modalias file in sysfs), thus loading all modules whose aliases match this string after wildcard expansion.

In this example, this means that, in addition to snd-fm801, the obsolete (and unwanted) forte driver will be loaded if it is available. See below for ways in which the loading of unwanted drivers can be prevented.

The kernel itself is also able to load modules for network protocols, filesystems and NLS support on demand.

7.4.2.5. Handling Hotpluggable/Dynamic Devices

When you plug in a device, such as a Universal Serial Bus (USB) MP3 player, the kernel recognizes that the device is now connected and generates a uevent. This uevent is then handled by udevd as described above.

7.4.3. Problems with Loading Modules and Creating Devices

There are a few possible problems when it comes to automatically creating device nodes.

7.4.3.1. A kernel module is not loaded automatically

Udev will only load a module if it has a bus-specific alias and the bus driver properly exports the necessary aliases to sysfs. In other cases, one should arrange module loading by other means. With Linux-3.13.3, Udev is known to load properly-written drivers for INPUT, IDE, PCI, USB, SCSI, SERIO, and FireWire devices.

To determine if the device driver you require has the necessary support for Udev, run modinfo with the module name as the argument. Now try locating the device directory under /sys/bus and check whether there is a modalias file there.

If the modalias file exists in sysfs, the driver supports the device and can talk to it directly, but doesn't have the alias, it is a bug in the driver. Load the driver without the help from Udev and expect the issue to be fixed later.

If there is no modalias file in the relevant directory under /sys/bus, this means that the kernel developers have not yet added modalias support to this bus type. With Linux-3.13.3, this is the case with ISA busses. Expect this issue to be fixed in later kernel versions.

Udev is not intended to load “wrapper” drivers such as snd-pcm-oss and non-hardware drivers such as loop at all.

7.4.3.2. A kernel module is not loaded automatically, and Udev is not intended to load it

If the “wrapper” module only enhances the functionality provided by some other module (e.g., snd-pcm-oss enhances the functionality of snd-pcm by making the sound cards available to OSS applications), configure modprobe to load the wrapper after Udev loads the wrapped module. To do this, add a “softdep” line in any /etc/modprobe.d/<filename>.conf file. For example:

softdep snd-pcm post: snd-pcm-oss
Note that the “softdep” command also allows pre: dependencies, or a mixture of both pre: and post:. See the modprobe.d(5) manual page for more information on “softdep” syntax and capabilities.

If the module in question is not a wrapper and is useful by itself, configure the modules bootscript to load this module on system boot. To do this, add the module name to the /etc/sysconfig/modules file on a separate line. This works for wrapper modules too, but is suboptimal in that case.

7.4.3.3. Udev loads some unwanted module

Either don't build the module, or blacklist it in a /etc/modprobe.d/blacklist.conf file as done with the forte module in the example below:

blacklist forte
Blacklisted modules can still be loaded manually with the explicit modprobe command.

7.4.3.4. Udev creates a device incorrectly, or makes a wrong symlink

This usually happens if a rule unexpectedly matches a device. For example, a poorly-writen rule can match both a SCSI disk (as desired) and the corresponding SCSI generic device (incorrectly) by vendor. Find the offending rule and make it more specific, with the help of the udevadm info command.

7.4.3.5. Udev rule works unreliably

This may be another manifestation of the previous problem. If not, and your rule uses sysfs attributes, it may be a kernel timing issue, to be fixed in later kernels. For now, you can work around it by creating a rule that waits for the used sysfs attribute and appending it to the /etc/udev/rules.d/10-wait_for_sysfs.rules file (create this file if it does not exist). Please notify the LFS Development list if you do so and it helps.

7.4.3.6. Udev does not create a device

Further text assumes that the driver is built statically into the kernel or already loaded as a module, and that you have already checked that Udev doesn't create a misnamed device.

Udev has no information needed to create a device node if a kernel driver does not export its data to sysfs. This is most common with third party drivers from outside the kernel tree. Create a static device node in /lib/udev/devices with the appropriate major/minor numbers (see the file devices.txt inside the kernel documentation or the documentation provided by the third party driver vendor). The static device node will be copied to /dev by the udev bootscript.

7.4.3.7. Device naming order changes randomly after rebooting

This is due to the fact that Udev, by design, handles uevents and loads modules in parallel, and thus in an unpredictable order. This will never be “fixed”. You should not rely upon the kernel device names being stable. Instead, create your own rules that make symlinks with stable names based on some stable attributes of the device, such as a serial number or the output of various *_id utilities installed by Udev. See Section 7.5, “Creating Custom Symlinks to Devices” and Section 7.2, “General Network Configuration” for examples.

7.4.4. Useful Reading

Additional helpful documentation is available at the following sites:

A Userspace Implementation of devfs http://www.kroah.com/linux/talks/ols_2003_udev_paper/Reprint-Kroah-Hartman-OLS2003.pdf

The sysfs Filesystem http://www.kernel.org/pub/linux/kernel/people/mochel/doc/papers/ols-2005/mochel.pdf

7.5. Creating Custom Symlinks to Devices

7.5.1. CD-ROM symlinks

Some software that you may want to install later (e.g., various media players) expect the /dev/cdrom and /dev/dvd symlinks to exist, and to point to a CD-ROM or DVD-ROM device. Also, it may be convenient to put references to those symlinks into /etc/fstab. Udev comes with a script that will generate rules files to create these symlinks for you, depending on the capabilities of each device, but you need to decide which of two modes of operation you wish to have the script use.

First, the script can operate in “by-path” mode (used by default for USB and FireWire devices), where the rules it creates depend on the physical path to the CD or DVD device. Second, it can operate in “by-id” mode (default for IDE and SCSI devices), where the rules it creates depend on identification strings stored in the CD or DVD device itself. The path is determined by Udev's path_id script, and the identification strings are read from the hardware by its ata_id or scsi_id programs, depending on which type of device you have.

There are advantages to each approach; the correct approach to use will depend on what kinds of device changes may happen. If you expect the physical path to the device (that is, the ports and/or slots that it plugs into) to change, for example because you plan on moving the drive to a different IDE port or a different USB connector, then you should use the “by-id” mode. On the other hand, if you expect the device's identification to change, for example because it may die, and you would replace it with a different device with the same capabilities and which is plugged into the same connectors, then you should use the “by-path” mode.

If either type of change is possible with your drive, then choose a mode based on the type of change you expect to happen more often.

Important

External devices (for example, a USB-connected CD drive) should not use by-path persistence, because each time the device is plugged into a new external port, its physical path will change. All externally-connected devices will have this problem if you write Udev rules to recognize them by their physical path; the problem is not limited to CD and DVD drives.

If you wish to see the values that the Udev scripts will use, then for the appropriate CD-ROM device, find the corresponding directory under /sys (e.g., this can be /sys/block/hdd) and run a command similar to the following:

udevadm test /sys/block/hdd
Look at the lines containing the output of various *_id programs. The “by-id” mode will use the ID_SERIAL value if it exists and is not empty, otherwise it will use a combination of ID_MODEL and ID_REVISION. The “by-path” mode will use the ID_PATH value.

If the default mode is not suitable for your situation, then the following modification can be made to the /etc/udev/rules.d/83-cdrom-symlinks.rules file, as follows (where mode is one of “by-id” or “by-path”):

sed -i -e 's/"write_cd_rules"/"write_cd_rules mode"/' \
    /etc/udev/rules.d/83-cdrom-symlinks.rules
Note that it is not necessary to create the rules files or symlinks at this time, because you have bind-mounted the host's /dev directory into the LFS system, and we assume the symlinks exist on the host. The rules and symlinks will be created the first time you boot your LFS system.

However, if you have multiple CD-ROM devices, then the symlinks generated at that time may point to different devices than they point to on your host, because devices are not discovered in a predictable order. The assignments created when you first boot the LFS system will be stable, so this is only an issue if you need the symlinks on both systems to point to the same device. If you need that, then inspect (and possibly edit) the generated /etc/udev/rules.d/70-persistent-cd.rules file after booting, to make sure the assigned symlinks match what you need.

7.5.2. Dealing with duplicate devices

As explained in Section 7.4, “Device and Module Handling on an LFS System”, the order in which devices with the same function appear in /dev is essentially random. E.g., if you have a USB web camera and a TV tuner, sometimes /dev/video0 refers to the camera and /dev/video1 refers to the tuner, and sometimes after a reboot the order changes to the opposite one. For all classes of hardware except sound cards and network cards, this is fixable by creating udev rules for custom persistent symlinks. The case of network cards is covered separately in Section 7.2, “General Network Configuration”, and sound card configuration can be found in BLFS.

For each of your devices that is likely to have this problem (even if the problem doesn't exist in your current Linux distribution), find the corresponding directory under /sys/class or /sys/block. For video devices, this may be /sys/class/video4linux/videoX. Figure out the attributes that identify the device uniquely (usually, vendor and product IDs and/or serial numbers work):

udevadm info -a -p /sys/class/video4linux/video0
Then write rules that create the symlinks, e.g.:

cat > /etc/udev/rules.d/83-duplicate_devs.rules << "EOF"

# Persistent symlinks for webcam and tuner
KERNEL=="video*", ATTRS{idProduct}=="1910", ATTRS{idVendor}=="0d81", \
    SYMLINK+="webcam"
KERNEL=="video*", ATTRS{device}=="0x036f", ATTRS{vendor}=="0x109e", \
    SYMLINK+="tvtuner"

EOF
The result is that /dev/video0 and /dev/video1 devices still refer randomly to the tuner and the web camera (and thus should never be used directly), but there are symlinks /dev/tvtuner and /dev/webcam that always point to the correct device.

7.6. LFS-Bootscripts-20130821
The LFS-Bootscripts package contains a set of scripts to start/stop the LFS system at bootup/shutdown.

Approximate build time:
less than 0.1 SBU
Required disk space:
260 KB
7.6.1. Installation of LFS-Bootscripts

Install the package:

make install
7.6.2. Contents of LFS-Bootscripts

Installed scripts:
checkfs, cleanfs, console, functions, halt, ifdown, ifup, localnet, modules, mountfs, mountvirtfs, network, rc, reboot, sendsignals, setclock, ipv4-static, swap, sysctl, sysklogd, template, udev, and udev_retry
Installed directories:
/etc/rc.d, /etc/init.d (symbolic link), /etc/sysconfig, /lib/services, /lib/lsb (symbolic link)
Short Descriptions

checkfs
Checks the integrity of the file systems before they are mounted (with the exception of journal and network based file systems)
cleanfs
Removes files that should not be preserved between reboots, such as those in /var/run/ and /var/lock/; it re-creates /var/run/utmp and removes the possibly present /etc/nologin, /fastboot, and /forcefsck files
console
Loads the correct keymap table for the desired keyboard layout; it also sets the screen font
functions
Contains common functions, such as error and status checking, that are used by several bootscripts
halt
Halts the system
ifdown
Stops a network device
ifup
Initializes a network device
localnet
Sets up the system's hostname and local loopback device
modules
Loads kernel modules listed in /etc/sysconfig/modules, using arguments that are also given there
mountfs
Mounts all file systems, except ones that are marked noauto or are network based
mountvirtfs
Mounts virtual kernel file systems, such as proc
network
Sets up network interfaces, such as network cards, and sets up the default gateway (where applicable)
rc
The master run-level control script; it is responsible for running all the other bootscripts one-by-one, in a sequence determined by the name of the symbolic links being processed
reboot
Reboots the system
sendsignals
Makes sure every process is terminated before the system reboots or halts
setclock
Resets the kernel clock to local time in case the hardware clock is not set to UTC time
ipv4-static
Provides the functionality needed to assign a static Internet Protocol (IP) address to a network interface
swap
Enables and disables swap files and partitions
sysctl
Loads system configuration values from /etc/sysctl.conf, if that file exists, into the running kernel
sysklogd
Starts and stops the system and kernel log daemons
template
A template to create custom bootscripts for other daemons
udev
Prepares the /dev directory and starts Udev
udev_retry
Retries failed udev uevents, and copies generated rules files from to /etc/udev/rules.d if required
7.7. How Do These Bootscripts Work?

Linux uses a special booting facility named SysVinit that is based on a concept of run-levels. It can be quite different from one system to another, so it cannot be assumed that because things worked in one particular Linux distribution, they should work the same in LFS too. LFS has its own way of doing things, but it respects generally accepted standards.

SysVinit (which will be referred to as “init” from now on) works using a run-levels scheme. There are seven (numbered 0 to 6) run-levels (actually, there are more run-levels, but they are for special cases and are generally not used. See init(8) for more details), and each one of those corresponds to the actions the computer is supposed to perform when it starts up. The default run-level is 3. Here are the descriptions of the different run-levels as they are implemented:

0: halt the computer
1: single-user mode
2: multi-user mode without networking
3: multi-user mode with networking
4: reserved for customization, otherwise does the same as 3
5: same as 4, it is usually used for GUI login (like X's xdm or KDE's kdm)
6: reboot the computer

7.7.1. Configuring Sysvinit

During the kernel initialization, the first program that is run is either specified on the command line or, by default init. This program reads the initialization file /etc/inittab. Create this file with:

cat > /etc/inittab << "EOF"
# Begin /etc/inittab

id:3:initdefault:

si::sysinit:/etc/rc.d/init.d/rc S

l0:0:wait:/etc/rc.d/init.d/rc 0
l1:S1:wait:/etc/rc.d/init.d/rc 1
l2:2:wait:/etc/rc.d/init.d/rc 2
l3:3:wait:/etc/rc.d/init.d/rc 3
l4:4:wait:/etc/rc.d/init.d/rc 4
l5:5:wait:/etc/rc.d/init.d/rc 5
l6:6:wait:/etc/rc.d/init.d/rc 6

ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now

su:S016:once:/sbin/sulogin

1:2345:respawn:/sbin/agetty --noclear tty1 9600
2:2345:respawn:/sbin/agetty tty2 9600
3:2345:respawn:/sbin/agetty tty3 9600
4:2345:respawn:/sbin/agetty tty4 9600
5:2345:respawn:/sbin/agetty tty5 9600
6:2345:respawn:/sbin/agetty tty6 9600

# End /etc/inittab
EOF
An explanation of this initialization file is in the man page for inittab. For LFS, the key command that is run is rc. The intialization file above will instruct rc to run all the scripts starting with an S in the /etc/rc.d/rcS.d directory followed by all the scripts starting with an S in the /etc/rc.d/rc?.d directory where the question mark is specified by the initdefault value.

As a convenience, the rc script reads a library of functions in /lib/lsb/init-functions. This library also reads an optional configuration file, /etc/sysconfig/rc.site. Any of the system configuration file parameters described in subsequent sections can be alternatively placed in this file allowing consolidation of all system parameters in this one file.

As a debugging convenience, the functions script also logs all output to /run/var/bootlog. Since the /run directory is a tmpfs, this file is not persistent across boots, however it is appended to the more permanent file /var/log/boot.log at the end of the boot process.

7.7.2. Changing Run Levels

Changing run-levels is done with init <runlevel>, where <runlevel> is the target run-level. For example, to reboot the computer, a user could issue the init 6 command, which is an alias for the reboot command. Likewise, init 0 is an alias for the halt command.

There are a number of directories under /etc/rc.d that look like rc?.d (where ? is the number of the run-level) and rcsysinit.d, all containing a number of symbolic links. Some begin with a K, the others begin with an S, and all of them have two numbers following the initial letter. The K means to stop (kill) a service and the S means to start a service. The numbers determine the order in which the scripts are run, from 00 to 99—the lower the number the earlier it gets executed. When init switches to another run-level, the appropriate services are either started or stopped, depending on the runlevel chosen.

The real scripts are in /etc/rc.d/init.d. They do the actual work, and the symlinks all point to them. K links and S links point to the same script in /etc/rc.d/init.d. This is because the scripts can be called with different parameters like start, stop, restart, reload, and status. When a K link is encountered, the appropriate script is run with the stop argument. When an S link is encountered, the appropriate script is run with the start argument.

There is one exception to this explanation. Links that start with an S in the rc0.d and rc6.d directories will not cause anything to be started. They will be called with the parameter stop to stop something. The logic behind this is that when a user is going to reboot or halt the system, nothing needs to be started. The system only needs to be stopped.

These are descriptions of what the arguments make the scripts do:

start
The service is started.
stop
The service is stopped.
restart
The service is stopped and then started again.
reload
The configuration of the service is updated. This is used after the configuration file of a service was modified, when the service does not need to be restarted.
status
Tells if the service is running and with which PIDs.
Feel free to modify the way the boot process works (after all, it is your own LFS system). The files given here are an example of how it can be done.

7.8. Configuring the system hostname

Part of the job of the localnet script is setting the system's hostname. This needs to be configured in the /etc/sysconfig/network file.

Create the /etc/sysconfig/network file and enter a hostname by running:

echo "HOSTNAME=<lfs>" > /etc/sysconfig/network
<lfs> needs to be replaced with the name given to the computer. Do not enter the Fully Qualified Domain Name (FQDN) here. That information is put in the /etc/hosts file.

7.9. Configuring the setclock Script

The setclock script reads the time from the hardware clock, also known as the BIOS or the Complementary Metal Oxide Semiconductor (CMOS) clock. If the hardware clock is set to UTC, this script will convert the hardware clock's time to the local time using the /etc/localtime file (which tells the hwclock program which timezone the user is in). There is no way to detect whether or not the hardware clock is set to UTC, so this needs to be configured manually.

The setclock is run via udev when the kernel detects the hardware capability upon boot. It can also be run manually with the stop parameter to store the system time to the CMOS clock.

If you cannot remember whether or not the hardware clock is set to UTC, find out by running the hwclock --localtime --show command. This will display what the current time is according to the hardware clock. If this time matches whatever your watch says, then the hardware clock is set to local time. If the output from hwclock is not local time, chances are it is set to UTC time. Verify this by adding or subtracting the proper amount of hours for the timezone to the time shown by hwclock. For example, if you are currently in the MST timezone, which is also known as GMT -0700, add seven hours to the local time.

Change the value of the UTC variable below to a value of 0 (zero) if the hardware clock is not set to UTC time.

Create a new file /etc/sysconfig/clock by running the following:

cat > /etc/sysconfig/clock << "EOF"
# Begin /etc/sysconfig/clock

UTC=1

# Set this to any options you might need to give to hwclock,
# such as machine hardware clock type for Alphas.
CLOCKPARAMS=

# End /etc/sysconfig/clock
EOF
A good hint explaining how to deal with time on LFS is available at http://www.linuxfromscratch.org/hints/downloads/files/time.txt. It explains issues such as time zones, UTC, and the TZ environment variable.

Note

The CLOCKPARAMS and UTC paramaters may be alternatively set in the /etc/sysconfig/rc.site file.

7.10. Configuring the Linux Console

This section discusses how to configure the console bootscript that sets up the keyboard map, console font and console kernel log level. If non-ASCII characters (e.g., the copyright sign, the British pound sign and Euro symbol) will not be used and the keyboard is a U.S. one, much of this section can be skipped. Without the configuration file, (or equivalent settings in rc.site), the console bootscript will do nothing.

The console script reads the /etc/sysconfig/console file for configuration information. Decide which keymap and screen font will be used. Various language-specific HOWTOs can also help with this, see http://www.tldp.org/HOWTO/HOWTO-INDEX/other-lang.html. If still in doubt, look in the /usr/share/keymaps and /usr/share/consolefonts directories for valid keymaps and screen fonts. Read loadkeys(1) and setfont(8) manual pages to determine the correct arguments for these programs.

The /etc/sysconfig/console file should contain lines of the form: VARIABLE="value". The following variables are recognized:

LOGLEVEL
This variable specifies the log level for kernel messages sent to the console as set by dmesg. Valid levels are from "1" (no messages) to "8". The default level is "7".
KEYMAP
This variable specifies the arguments for the loadkeys program, typically, the name of keymap to load, e.g., “es”. If this variable is not set, the bootscript will not run the loadkeys program, and the default kernel keymap will be used.
KEYMAP_CORRECTIONS
This (rarely used) variable specifies the arguments for the second call to the loadkeys program. This is useful if the stock keymap is not completely satisfactory and a small adjustment has to be made. E.g., to include the Euro sign into a keymap that normally doesn't have it, set this variable to “euro2”.
FONT
This variable specifies the arguments for the setfont program. Typically, this includes the font name, “-m”, and the name of the application character map to load. E.g., in order to load the “lat1-16” font together with the “8859-1” application character map (as it is appropriate in the USA), set this variable to “lat1-16 -m 8859-1”. In UTF-8 mode, the kernel uses the application character map for conversion of composed 8-bit key codes in the keymap to UTF-8, and thus the argument of the "-m" parameter should be set to the encoding of the composed key codes in the keymap.
UNICODE
Set this variable to “1”, “yes” or “true” in order to put the console into UTF-8 mode. This is useful in UTF-8 based locales and harmful otherwise.
LEGACY_CHARSET
For many keyboard layouts, there is no stock Unicode keymap in the Kbd package. The console bootscript will convert an available keymap to UTF-8 on the fly if this variable is set to the encoding of the available non-UTF-8 keymap.
Some examples:

For a non-Unicode setup, only the KEYMAP and FONT variables are generally needed. E.g., for a Polish setup, one would use:

cat > /etc/sysconfig/console << "EOF"
# Begin /etc/sysconfig/console

KEYMAP="pl2"
FONT="lat2a-16 -m 8859-2"

# End /etc/sysconfig/console
EOF
As mentioned above, it is sometimes necessary to adjust a stock keymap slightly. The following example adds the Euro symbol to the German keymap:

cat > /etc/sysconfig/console << "EOF"
# Begin /etc/sysconfig/console

KEYMAP="de-latin1"
KEYMAP_CORRECTIONS="euro2"
FONT="lat0-16 -m 8859-15"

# End /etc/sysconfig/console
EOF
The following is a Unicode-enabled example for Bulgarian, where a stock UTF-8 keymap exists:

cat > /etc/sysconfig/console << "EOF"
# Begin /etc/sysconfig/console

UNICODE="1"
KEYMAP="bg_bds-utf8"
FONT="LatArCyrHeb-16"

# End /etc/sysconfig/console
EOF
Due to the use of a 512-glyph LatArCyrHeb-16 font in the previous example, bright colors are no longer available on the Linux console unless a framebuffer is used. If one wants to have bright colors without framebuffer and can live without characters not belonging to his language, it is still possible to use a language-specific 256-glyph font, as illustrated below:

cat > /etc/sysconfig/console << "EOF"
# Begin /etc/sysconfig/console

UNICODE="1"
KEYMAP="bg_bds-utf8"
FONT="cyr-sun16"

# End /etc/sysconfig/console
EOF
The following example illustrates keymap autoconversion from ISO-8859-15 to UTF-8 and enabling dead keys in Unicode mode:

cat > /etc/sysconfig/console << "EOF"
# Begin /etc/sysconfig/console

UNICODE="1"
KEYMAP="de-latin1"
KEYMAP_CORRECTIONS="euro2"
LEGACY_CHARSET="iso-8859-15"
FONT="LatArCyrHeb-16 -m 8859-15"

# End /etc/sysconfig/console
EOF
Some keymaps have dead keys (i.e., keys that don't produce a character by themselves, but put an accent on the character produced by the next key) or define composition rules (such as: “press Ctrl+. A E to get Æ” in the default keymap). Linux-3.13.3 interprets dead keys and composition rules in the keymap correctly only when the source characters to be composed together are not multibyte. This deficiency doesn't affect keymaps for European languages, because there accents are added to unaccented ASCII characters, or two ASCII characters are composed together. However, in UTF-8 mode it is a problem, e.g., for the Greek language, where one sometimes needs to put an accent on the letter “alpha”. The solution is either to avoid the use of UTF-8, or to install the X window system that doesn't have this limitation in its input handling.

For Chinese, Japanese, Korean and some other languages, the Linux console cannot be configured to display the needed characters. Users who need such languages should install the X Window System, fonts that cover the necessary character ranges, and the proper input method (e.g., SCIM, it supports a wide variety of languages).

Note

The /etc/sysconfig/console file only controls the Linux text console localization. It has nothing to do with setting the proper keyboard layout and terminal fonts in the X Window System, with ssh sessions or with a serial console. In such situations, limitations mentioned in the last two list items above do not apply.

7.11. Configuring the sysklogd Script

The sysklogd script invokes the syslogd program with the -m 0 option. This option turns off the periodic timestamp mark that syslogd writes to the log files every 20 minutes by default. If you want to turn on this periodic timestamp mark, edit /etc/sysconfig/rc.site and define the variable SYSKLOGD_PARMS to the desired value. For instance, to remove all parameters, set the variable to a null value:

SYSKLOGD_PARMS=
See man syslogd for more options.

7.12. The rc.site File

The optional /etc/sysconfig/rc.site file contains settings that are automatically set for each boot script. It can alternatively set the values specified in the hostname, console, and clock files in the /etc/sysconfig/ directory. If the associated variables are present in both these separate files and rc.site, the values in the script specific files have precedence.

rc.site also contains parameters that can customize other aspects of the boot process. Setting the IPROMPT variable will enable selective running of bootscripts. Other options are described in the file comments. The default version of the file is as follows:

# rc.site
# Optional parameters for boot scripts.

# Distro Information
# These values, if specified here, override the defaults
#DISTRO="Linux From Scratch" # The distro name
#DISTRO_CONTACT="lfs-dev@linuxfromscratch.org" # Bug report address
#DISTRO_MINI="LFS" # Short name used in filenames for distro config

# Define custom colors used in messages printed to the screen

# Please consult `man console_codes` for more information
# under the "ECMA-48 Set Graphics Rendition" section
#
# Warning: when switching from a 8bit to a 9bit font,
# the linux console will reinterpret the bold (1;) to
# the top 256 glyphs of the 9bit font.  This does
# not affect framebuffer consoles

# These values, if specified here, override the defaults
#BRACKET="\\033[1;34m" # Blue
#FAILURE="\\033[1;31m" # Red
#INFO="\\033[1;36m"    # Cyan
#NORMAL="\\033[0;39m"  # Grey
#SUCCESS="\\033[1;32m" # Green
#WARNING="\\033[1;33m" # Yellow

# Use a colored prefix
# These values, if specified here, override the defaults
#BMPREFIX="     "
#SUCCESS_PREFIX="${SUCCESS}  *  ${NORMAL}"
#FAILURE_PREFIX="${FAILURE}*****${NORMAL}"
#WARNING_PREFIX="${WARNING} *** ${NORMAL}"

# Interactive startup
#IPROMPT="yes" # Whether to display the interactive boot prompt
#itime="3"    # The amount of time (in seconds) to display the prompt

# The total length of the distro welcome string, without escape codes
#wlen=$(echo "Welcome to ${DISTRO}" | wc -c )
#welcome_message="Welcome to ${INFO}${DISTRO}${NORMAL}"

# The total length of the interactive string, without escape codes
#ilen=$(echo "Press 'I' to enter interactive startup" | wc -c )
#i_message="Press '${FAILURE}I${NORMAL}' to enter interactive startup"

# Set scripts to skip the file system check on reboot
#FASTBOOT=yes

# Skip reading from the console
#HEADLESS=yes

# Write out fsck progress if yes
#VERBOSE_FSCK=no

# Speed up boot without waiting for settle in udev
#OMIT_UDEV_SETTLE=y

# Speed up boot without waiting for settle in udev_retry
#OMIT_UDEV_RETRY_SETTLE=yes

# Skip cleaning /tmp if yes
#SKIPTMPCLEAN=no

# For setclock
#UTC=1
#CLOCKPARAMS=

# For consolelog
#LOGLEVEL=5

# For network
#HOSTNAME=mylfs

# Delay between TERM and KILL signals at shutdown
#KILLDELAY=3

# Optional sysklogd parameters
#SYSKLOGD_PARMS="-m 0"

# Console parameters
#UNICODE=1
#KEYMAP="de-latin1"
#KEYMAP_CORRECTIONS="euro2"
#FONT="lat0-16 -m 8859-15"
#LEGACY_CHARSET=

7.12.1. Customizing the Boot and Shutdown Scripts

The LFS boot scripts boot and shut down a system in a fairly efficient manner, but there are a few tweaks that you can make in the rc.site file to improve speed even more and to adjust messages according to your preferences. To do this, adjust the settings in the /etc/sysconfig/rc.site file above.

During the boot script udev, there is a call to udev settle that requires some time to complete. This time may or may not be required depending on devices present in the system. If you only have simple partitions and a single ethernet card, the boot process will probably not need to wait for this command. To skip it, set the variable OMIT_UDEV_SETTLE=y.

The boot script udev_retry also runs udev settle by default. This command is only needed by default if the /var directory is separately mounted. This is because the clock needs the file /var/lib/hwclock/adjtime. Other customizations may also need to wait for udev to complete, but in many installations it is not needed. Skip the command by setting the variable OMIT_UDEV_RETRY_SETTLE=y.

By default, the file system checks are silent. This can appear to be a delay during the bootup process. To turn on the fsck output, set the variable VERBOSE_FSCK=y.

When rebooting, you may want to skip the filesystem check, fsck, completely. To do this, either create the file /fastboot or reboot the system with the command /sbin/shutdown -f -r now. On the other hand, you can force all file systems to be checked by creating /forcefsck or running shutdown with the -F parameter instead of -f.

Setting the variable FASTBOOT=y will disable fsck during the boot process until it is removed. This is not recommended on a permanent basis.

Normally, all files in the /tmp directory are deleted at boot time. Depending on the number of files or directories present, this can cause a noticeable delay in the boot process. To skip removing these files set the variable SKIPTMPCLEAN=y.

During shutdown, the init program sends a TERM signal to each program it has started (e.g. agetty), waits for a set time (default 3 seconds), and sends each process a KILL signal and waits again. This process is repeated in the sendsignals script for any processes that are not shut down by their own scripts. The delay for init can be set by passing a parameter. For example to remove the delay in init, pass the -t0 parameter when shutting down or rebooting (e.g. /sbin/shutdown -t0 -r now). The delay for the sendsignals script can be skipped by setting the parameter KILLDELAY=0.

7.13. The Bash Shell Startup Files

The shell program /bin/bash (hereafter referred to as “the shell”) uses a collection of startup files to help create an environment to run in. Each file has a specific use and may affect login and interactive environments differently. The files in the /etc directory provide global settings. If an equivalent file exists in the home directory, it may override the global settings.

An interactive login shell is started after a successful login, using /bin/login, by reading the /etc/passwd file. An interactive non-login shell is started at the command-line (e.g., [prompt]$/bin/bash). A non-interactive shell is usually present when a shell script is running. It is non-interactive because it is processing a script and not waiting for user input between commands.

For more information, see info bash under the Bash Startup Files and Interactive Shells section.

The files /etc/profile and ~/.bash_profile are read when the shell is invoked as an interactive login shell.

The base /etc/profile below sets some environment variables necessary for native language support. Setting them properly results in:

The output of programs translated into the native language

Correct classification of characters into letters, digits and other classes. This is necessary for bash to properly accept non-ASCII characters in command lines in non-English locales

The correct alphabetical sorting order for the country

Appropriate default paper size

Correct formatting of monetary, time, and date values

Replace <ll> below with the two-letter code for the desired language (e.g., “en”) and <CC> with the two-letter code for the appropriate country (e.g., “GB”). <charmap> should be replaced with the canonical charmap for your chosen locale. Optional modifiers such as “@euro” may also be present.

The list of all locales supported by Glibc can be obtained by running the following command:

locale -a
Charmaps can have a number of aliases, e.g., “ISO-8859-1” is also referred to as “iso8859-1” and “iso88591”. Some applications cannot handle the various synonyms correctly (e.g., require that “UTF-8” is written as “UTF-8”, not “utf8”), so it is safest in most cases to choose the canonical name for a particular locale. To determine the canonical name, run the following command, where <locale name> is the output given by locale -a for your preferred locale (“en_GB.iso88591” in our example).

LC_ALL=<locale name> locale charmap
For the “en_GB.iso88591” locale, the above command will print:

ISO-8859-1
This results in a final locale setting of “en_GB.ISO-8859-1”. It is important that the locale found using the heuristic above is tested prior to it being added to the Bash startup files:

LC_ALL=<locale name> locale language
LC_ALL=<locale name> locale charmap
LC_ALL=<locale name> locale int_curr_symbol
LC_ALL=<locale name> locale int_prefix
The above commands should print the language name, the character encoding used by the locale, the local currency, and the prefix to dial before the telephone number in order to get into the country. If any of the commands above fail with a message similar to the one shown below, this means that your locale was either not installed in Chapter 6 or is not supported by the default installation of Glibc.

locale: Cannot set LC_* to default locale: No such file or directory
If this happens, you should either install the desired locale using the localedef command, or consider choosing a different locale. Further instructions assume that there are no such error messages from Glibc.

Some packages beyond LFS may also lack support for your chosen locale. One example is the X library (part of the X Window System), which outputs the following error message if the locale does not exactly match one of the character map names in its internal files:

Warning: locale not supported by Xlib, locale set to C
In several cases Xlib expects that the character map will be listed in uppercase notation with canonical dashes. For instance, "ISO-8859-1" rather than "iso88591". It is also possible to find an appropriate specification by removing the charmap part of the locale specification. This can be checked by running the locale charmap command in both locales. For example, one would have to change "de_DE.ISO-8859-15@euro" to "de_DE@euro" in order to get this locale recognized by Xlib.

Other packages can also function incorrectly (but may not necessarily display any error messages) if the locale name does not meet their expectations. In those cases, investigating how other Linux distributions support your locale might provide some useful information.

Once the proper locale settings have been determined, create the /etc/profile file:

cat > /etc/profile << "EOF"
# Begin /etc/profile

export LANG=<ll>_<CC>.<charmap><@modifiers>

# End /etc/profile
EOF
The “C” (default) and “en_US” (the recommended one for United States English users) locales are different. “C” uses the US-ASCII 7-bit character set, and treats bytes with the high bit set as invalid characters. That's why, e.g., the ls command substitutes them with question marks in that locale. Also, an attempt to send mail with such characters from Mutt or Pine results in non-RFC-conforming messages being sent (the charset in the outgoing mail is indicated as “unknown 8-bit”). So you can use the “C” locale only if you are sure that you will never need 8-bit characters.

UTF-8 based locales are not supported well by many programs. Work is in progress to document and, if possible, fix such problems, see http://www.linuxfromscratch.org/blfs/view/svn/introduction/locale-issues.html.

7.14. Creating the /etc/inputrc File

The inputrc file handles keyboard mapping for specific situations. This file is the startup file used by Readline — the input-related library — used by Bash and most other shells.

Most people do not need user-specific keyboard mappings so the command below creates a global /etc/inputrc used by everyone who logs in. If you later decide you need to override the defaults on a per-user basis, you can create a .inputrc file in the user's home directory with the modified mappings.

For more information on how to edit the inputrc file, see info bash under the Readline Init File section. info readline is also a good source of information.

Below is a generic global inputrc along with comments to explain what the various options do. Note that comments cannot be on the same line as commands. Create the file using the following command:

cat > /etc/inputrc << "EOF"
# Begin /etc/inputrc
# Modified by Chris Lynn <roryo@roryo.dynup.net>

# Allow the command prompt to wrap to the next line
set horizontal-scroll-mode Off

# Enable 8bit input
set meta-flag On
set input-meta On

# Turns off 8th bit stripping
set convert-meta Off

# Keep the 8th bit for display
set output-meta On

# none, visible or audible
set bell-style none

# All of the following map the escape sequence of the value
# contained in the 1st argument to the readline specific functions
"\eOd": backward-word
"\eOc": forward-word

# for linux console
"\e[1~": beginning-of-line
"\e[4~": end-of-line
"\e[5~": beginning-of-history
"\e[6~": end-of-history
"\e[3~": delete-char
"\e[2~": quoted-insert

# for xterm
"\eOH": beginning-of-line
"\eOF": end-of-line

# for Konsole
"\e[H": beginning-of-line
"\e[F": end-of-line

# End /etc/inputrc
EOF
Chapter 8. Making the LFS System Bootable

8.1. Introduction

It is time to make the LFS system bootable. This chapter discusses creating an fstab file, building a kernel for the new LFS system, and installing the GRUB boot loader so that the LFS system can be selected for booting at startup.

8.2. Creating the /etc/fstab File

The /etc/fstab file is used by some programs to determine where file systems are to be mounted by default, in which order, and which must be checked (for integrity errors) prior to mounting. Create a new file systems table like this:

cat > /etc/fstab << "EOF"
# Begin /etc/fstab

# file system  mount-point  type     options             dump  fsck
#                                                              order

/dev/<xxx>     /            <fff>    defaults            1     1
/dev/<yyy>     swap         swap     pri=1               0     0
proc           /proc        proc     nosuid,noexec,nodev 0     0
sysfs          /sys         sysfs    nosuid,noexec,nodev 0     0
devpts         /dev/pts     devpts   gid=5,mode=620      0     0
tmpfs          /run         tmpfs    defaults            0     0
devtmpfs       /dev         devtmpfs mode=0755,nosuid    0     0

# End /etc/fstab
EOF
Replace <xxx>, <yyy>, and <fff> with the values appropriate for the system, for example, sda2, sda5, and ext4. For details on the six fields in this file, see man 5 fstab.

Filesystems with MS-DOS or Windows origin (i.e.: vfat, ntfs, smbfs, cifs, iso9660, udf) need the “iocharset” mount option in order for non-ASCII characters in file names to be interpreted properly. The value of this option should be the same as the character set of your locale, adjusted in such a way that the kernel understands it. This works if the relevant character set definition (found under File systems -> Native Language Support) has been compiled into the kernel or built as a module. The “codepage” option is also needed for vfat and smbfs filesystems. It should be set to the codepage number used under MS-DOS in your country. E.g., in order to mount USB flash drives, a ru_RU.KOI8-R user would need the following in the options portion of its mount line in /etc/fstab:

noauto,user,quiet,showexec,iocharset=koi8r,codepage=866
The corresponding options fragment for ru_RU.UTF-8 users is:

noauto,user,quiet,showexec,iocharset=utf8,codepage=866
Note

In the latter case, the kernel emits the following message:

FAT: utf8 is not a recommended IO charset for FAT filesystems,
    filesystem will be case sensitive!
This negative recommendation should be ignored, since all other values of the “iocharset” option result in wrong display of filenames in UTF-8 locales.

It is also possible to specify default codepage and iocharset values for some filesystems during kernel configuration. The relevant parameters are named “Default NLS Option” (CONFIG_NLS_DEFAULT), “Default Remote NLS Option” (CONFIG_SMB_NLS_DEFAULT), “Default codepage for FAT” (CONFIG_FAT_DEFAULT_CODEPAGE), and “Default iocharset for FAT” (CONFIG_FAT_DEFAULT_IOCHARSET). There is no way to specify these settings for the ntfs filesystem at kernel compilation time.

It is possible to make the ext3 filesystem reliable across power failures for some hard disk types. To do this, add the barrier=1 mount option to the appropriate entry in /etc/fstab. To check if the disk drive supports this option, run hdparm on the applicable disk drive. For example, if:

hdparm -I /dev/sda | grep NCQ
returns non-empty output, the option is supported.

Note: Logical Volume Management (LVM) based partitions cannot use the barrier option.

8.3. Linux-3.13.3
The Linux package contains the Linux kernel.

Approximate build time:
3.0 - 49.0 SBU (typically about 6 SBU)
Required disk space:
700 - 6800 MB (typically about 800-900 MB)
8.3.1. Installation of the kernel

Building the kernel involves a few steps—configuration, compilation, and installation. Read the README file in the kernel source tree for alternative methods to the way this book configures the kernel.

Prepare for compilation by running the following command:

make mrproper
This ensures that the kernel tree is absolutely clean. The kernel team recommends that this command be issued prior to each kernel compilation. Do not rely on the source tree being clean after un-tarring.

Configure the kernel via a menu-driven interface. For general information on kernel configuration see http://www.linuxfromscratch.org/hints/downloads/files/kernel-configuration.txt. BLFS has some information regarding particular kernel configuration requirements of packages outside of LFS at http://www.linuxfromscratch.org/blfs/view/svn/longindex.html#kernel-config-index. Additional information about configuring and building the kernel can be found at http://www.kroah.com/lkn/

Note

A good starting place for setting up the kernel configuration is to run make defconfig. This will set the base configuration to a good state that takes your current system architecture into account.

Due to recent changes in udev, be sure to select:

Device Drivers  --->
  Generic Driver Options  --->
     Maintain a devtmpfs filesystem to mount at /dev
make LANG=<host_LANG_value> LC_ALL= menuconfig
The meaning of the make parameters:

LANG=<host_LANG_value> LC_ALL=
This establishes the locale setting to the one used on the host. This is needed for a proper menuconfig ncurses interface line drawing on UTF-8 linux text console.
Be sure to replace <host_LANG_value> by the value of the $LANG variable from your host. If not set, you could use instead the host's value of $LC_ALL or $LC_CTYPE.
Alternatively, make oldconfig may be more appropriate in some situations. See the README file for more information.

If desired, skip kernel configuration by copying the kernel config file, .config, from the host system (assuming it is available) to the unpacked linux-3.13.3 directory. However, we do not recommend this option. It is often better to explore all the configuration menus and create the kernel configuration from scratch.

Compile the kernel image and modules:

make
If using kernel modules, module configuration in /etc/modprobe.d may be required. Information pertaining to modules and kernel configuration is located in Section 7.4, “Device and Module Handling on an LFS System” and in the kernel documentation in the linux-3.13.3/Documentation directory. Also, modprobe.conf(5) may be of interest.

Install the modules, if the kernel configuration uses them:

make modules_install
After kernel compilation is complete, additional steps are required to complete the installation. Some files need to be copied to the /boot directory.

The path to the kernel image may vary depending on the platform being used. The filename below can be changed to suit your taste, but the stem of the filename should be vmlinuz to be compatible with the automatic setup of the boot process described in the next section. The following command assumes an x86 architecture:

cp -v arch/x86/boot/bzImage /boot/vmlinuz-3.13.3-lfs-7.5
System.map is a symbol file for the kernel. It maps the function entry points of every function in the kernel API, as well as the addresses of the kernel data structures for the running kernel. It is used as a resource when investigating kernel problems. Issue the following command to install the map file:

cp -v System.map /boot/System.map-3.13.3
The kernel configuration file .config produced by the make menuconfig step above contains all the configuration selections for the kernel that was just compiled. It is a good idea to keep this file for future reference:

cp -v .config /boot/config-3.13.3
Install the documentation for the Linux kernel:

install -d /usr/share/doc/linux-3.13.3
cp -r Documentation/* /usr/share/doc/linux-3.13.3
It is important to note that the files in the kernel source directory are not owned by root. Whenever a package is unpacked as user root (like we did inside chroot), the files have the user and group IDs of whatever they were on the packager's computer. This is usually not a problem for any other package to be installed because the source tree is removed after the installation. However, the Linux source tree is often retained for a long time. Because of this, there is a chance that whatever user ID the packager used will be assigned to somebody on the machine. That person would then have write access to the kernel source.

If the kernel source tree is going to be retained, run chown -R 0:0 on the linux-3.13.3 directory to ensure all files are owned by user root.

Warning

Some kernel documentation recommends creating a symlink from /usr/src/linux pointing to the kernel source directory. This is specific to kernels prior to the 2.6 series and must not be created on an LFS system as it can cause problems for packages you may wish to build once your base LFS system is complete.

Warning

The headers in the system's include directory (/usr/include) should always be the ones against which Glibc was compiled, that is, the sanitised headers installed in Section 6.7, “Linux-3.13.3 API Headers”. Therefore, they should never be replaced by either the raw kernel headers or any other kernel sanitized headers.

8.3.2. Configuring Linux Module Load Order

Most of the time Linux modules are loaded automatically, but sometimes it needs some specific direction. The program that loads modules, modprobe or insmod, uses /etc/modprobe.d/usb.conf for this purpose. This file needs to be created so that if the USB drivers (ehci_hcd, ohci_hcd and uhci_hcd) have been built as modules, they will be loaded in the correct order; ehci_hcd needs to be loaded prior to ohci_hcd and uhci_hcd in order to avoid a warning being output at boot time.

Create a new file /etc/modprobe.d/usb.conf by running the following:

install -v -m755 -d /etc/modprobe.d
cat > /etc/modprobe.d/usb.conf << "EOF"
# Begin /etc/modprobe.d/usb.conf

install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true

# End /etc/modprobe.d/usb.conf
EOF
8.3.3. Contents of Linux

Installed files:
config-3.13.3, vmlinuz-3.13.3-lfs-7.5, and System.map-3.13.3
Installed directories:
/lib/modules, /usr/share/doc/linux-3.13.3
Short Descriptions

config-3.13.3
Contains all the configuration selections for the kernel
vmlinuz-3.13.3-lfs-7.5
The engine of the Linux system. When turning on the computer, the kernel is the first part of the operating system that gets loaded. It detects and initializes all components of the computer's hardware, then makes these components available as a tree of files to the software and turns a single CPU into a multitasking machine capable of running scores of programs seemingly at the same time
System.map-3.13.3
A list of addresses and symbols; it maps the entry points and addresses of all the functions and data structures in the kernel
8.4. Using GRUB to Set Up the Boot Process
8.4.1. Introduction

Warning

Configuring GRUB incorrectly can render your system inoperable without an alternate boot device such as a CD-ROM. This section is not required to boot your LFS system. You may just want to modify your current boot loader, e.g. Grub-Legacy, GRUB2, or LILO.

Ensure that an emergency boot disk is ready to “rescue” the computer if the computer becomes unusable (un-bootable). If you do not already have a boot device, you can create one. In order for the procedure below to work, you need to jump ahead to BLFS and install xorriso from the libisoburn package.

cd /tmp &&
grub-mkrescue --output=grub-img.iso &&
xorriso -as cdrecord -v dev=/dev/cdrw blank=as_needed grub-img.iso
8.4.2. GRUB Naming Conventions

GRUB uses its own naming structure for drives and partitions in the form of (hdn,m), where n is the hard drive number and m is the partition number. The hard drive number starts from zero, but the partition number starts from one for normal partitions and five for extended partitions. Note that this is different from earlier versions where both numbers started from zero. For example, partition sda1 is (hd0,1) to GRUB and sdb3 is (hd1,3). In contrast to Linux, GRUB does not consider CD-ROM drives to be hard drives. For example, if using a CD on hdb and a second hard drive on hdc, that second hard drive would still be (hd1).

8.4.3. Setting Up the Configuration

GRUB works by writing data to the first physical track of the hard disk. This area is not part of any file system. The programs there access GRUB modules in the boot partition. The default location is /boot/grub/.

The location of the boot partition is a choice of the user that affects the configuration. One recommendation is to have a separate small (suggested size is 100 MB) partition just for boot information. That way each build, whether LFS or some commercial distro, can access the same boot files and access can be made from any booted system. If you choose to do this, you will need to mount the separate partition, move all files in the current /boot directory (e.g. the linux kernel you just built in the previous section) to the new partition. You will then need to unmount the partition and remount it as /boot. If you do this, be sure to update /etc/fstab.

Using the current lfs partition will also work, but configuration for multiple systems is more difficult.

Using the above information, determine the appropriate designator for the root partition (or boot partition, if a separate one is used). For the following example, it is assumed that the root (or separate boot) partition is sda2.

Install the GRUB files into /boot/grub and set up the boot track:

Warning

The following command will overwrite the current boot loader. Do not run the command if this is not desired, for example, if using a third party boot manager to manage the Master Boot Record (MBR).

grub-install /dev/sda
8.4.4. Creating the Configuration File

Generate /boot/grub/grub.cfg:

cat > /boot/grub/grub.cfg << "EOF"
# Begin /boot/grub/grub.cfg
set default=0
set timeout=5

insmod ext2
set root=(hd0,2)

menuentry "GNU/Linux, Linux 3.13.3-lfs-7.5" {
        linux   /boot/vmlinuz-3.13.3-lfs-7.5 root=/dev/sda2 ro
}
EOF
Note

From GRUB's perspective, the kernel files are relative to the partition used. If you used a separate /boot partition, remove /boot from the above linux line. You will also need to change the set root line to point to the boot partition.

GRUB is an extremely powerful program and it provides a tremendous number of options for booting from a wide variety of devices, operating systems, and partition types. There are also many options for customization such as graphical splash screens, playing sounds, mouse input, etc. The details of these options are beyond the scope of this introduction.

Caution

There is a command, grub-mkconfig, that can write a configuration file automatically. It uses a set of scripts in /etc/grub.d/ and will destroy any customizations that you make. These scripts are designed primarily for non-source distributions and are not recommended for LFS. If you install a commercial Linux distribution, there is a good chance that this program will be run. Be sure to back up your grub.cfg file.

Chapter 9. The End

9.1. The End

Well done! The new LFS system is installed! We wish you much success with your shiny new custom-built Linux system.

It may be a good idea to create an /etc/lfs-release file. By having this file, it is very easy for you (and for us if you need to ask for help at some point) to find out which LFS version is installed on the system. Create this file by running:

echo 7.5 > /etc/lfs-release
It is also a good idea to create a file to show the status of your new system with respect to the Linux Standards Base (LSB). To create this file, run:

cat > /etc/lsb-release << "EOF"
DISTRIB_ID="Linux From Scratch"
DISTRIB_RELEASE="7.5"
DISTRIB_CODENAME="<your name here>"
DISTRIB_DESCRIPTION="Linux From Scratch"
EOF
Be sure to put some sort of customization for the field 'DISTRIB_CODENAME' to make the system uniquely yours.

9.2. Get Counted

Now that you have finished the book, do you want to be counted as an LFS user? Head over to http://www.linuxfromscratch.org/cgi-bin/lfscounter.php and register as an LFS user by entering your name and the first LFS version you have used.

Let's reboot into LFS now.

9.3. Rebooting the System

Now that all of the software has been installed, it is time to reboot your computer. However, you should be aware of a few things. The system you have created in this book is quite minimal, and most likely will not have the functionality you would need to be able to continue forward. By installing a few extra packages from the BLFS book while still in our current chroot environment, you can leave yourself in a much better position to continue on once you reboot into your new LFS installation. Here are some suggestions:

A text mode browser such as Lynx will allow you to easily view the BLFS book in one virtual terminal, while building packages in another.

The GPM package will allow you to perform copy/paste actions in your virtual terminals.

If you are in a situation where static IP configuration does not meet your networking requirements, installing a package such as dhcpcd or the client portion of dhcp may be useful.

Installing sudo may be useful for building packages as a non-root user and easily installing the resulting packages in your new system.

If you want to access your new system from a remote system within a comfortable GUI environment, install openssh and it's prerequsite, openssl.

To make fetching files over the internet easier, install wget.

If one or more of your disk drives have a GUID partition table (GPT), either gptfdisk or parted will be useful.

Finally, a review of the following configuration files is also appropriate at this point.

/etc/bashrc

/etc/dircolors

/etc/fstab

/etc/hosts

/etc/inputrc

/etc/profile

/etc/resolv.conf

/etc/vimrc

/root/.bash_profile

/root/.bashrc

/etc/sysconfig/network

/etc/sysconfig/ifconfig.eth0

Now that we have said that, lets move on to booting our shiny new LFS installation for the first time! First exit from the chroot environment:

logout
Then unmount the virtual file systems:

umount -v $LFS/dev/pts
umount -v $LFS/dev
umount -v $LFS/run
umount -v $LFS/proc
umount -v $LFS/sys
Unmount the LFS file system itself:

umount -v $LFS
If multiple partitions were created, unmount the other partitions before unmounting the main one, like this:

umount -v $LFS/usr
umount -v $LFS/home
umount -v $LFS
Now, reboot the system with:

shutdown -r now
Assuming the GRUB boot loader was set up as outlined earlier, the menu is set to boot LFS 7.5 automatically.

When the reboot is complete, the LFS system is ready for use and more software may be added to suit your needs.

9.4. What Now?

Thank you for reading this LFS book. We hope that you have found this book helpful and have learned more about the system creation process.

Now that the LFS system is installed, you may be wondering “What next?” To answer that question, we have compiled a list of resources for you.

Maintenance

Bugs and security notices are reported regularly for all software. Since an LFS system is compiled from source, it is up to you to keep abreast of such reports. There are several online resources that track such reports, some of which are shown below:

Freecode (http://freecode.com/)

Freecode can notify you (via email) of new versions of packages installed on your system.

CERT (Computer Emergency Response Team)

CERT has a mailing list that publishes security alerts concerning various operating systems and applications. Subscription information is available at http://www.us-cert.gov/cas/signup.html.

Bugtraq

Bugtraq is a full-disclosure computer security mailing list. It publishes newly discovered security issues, and occasionally potential fixes for them. Subscription information is available at http://www.securityfocus.com/archive.

Beyond Linux From Scratch

The Beyond Linux From Scratch book covers installation procedures for a wide range of software beyond the scope of the LFS Book. The BLFS project is located at http://www.linuxfromscratch.org/blfs/.

LFS Hints

The LFS Hints are a collection of educational documents submitted by volunteers in the LFS community. The hints are available at http://www.linuxfromscratch.org/hints/list.html.

Mailing lists

There are several LFS mailing lists you may subscribe to if you are in need of help, want to stay current with the latest developments, want to contribute to the project, and more. See Chapter 1 - Mailing Lists for more information.

The Linux Documentation Project

The goal of The Linux Documentation Project (TLDP) is to collaborate on all of the issues of Linux documentation. The TLDP features a large collection of HOWTOs, guides, and man pages. It is located at http://www.tldp.org/.
